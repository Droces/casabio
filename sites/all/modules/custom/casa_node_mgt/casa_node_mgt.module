<?php
/**
 * @file
 * Casa Node Management module, which provides functions that manage nodes that are unique to CasaBio.
 */




// =============================================================================
/* CONTENTS

  [NU] = Function is not currently used

  includes
  constants

  // Generic module hook functions
  [NU] casa_node_mgt_help()
  casa_node_mgt_menu()

  // Menu callbacks
  create_blank_observations_callback()
  create_blank_observations()
  rotate_pictures_callback()
  rotate_pictures()
  rotate_picture()

  // Block functions
  casa_node_mgt_block_info()
  casa_node_mgt_block_view()

  // Alter functions
  casa_node_mgt_form_node_form_alter()
  identification_form_submit()
  habitat_record_form_submit()
  casa_node_mgt_inline_entity_form_table_fields_alter()
  casa_node_mgt_inline_entity_form_entity_form_alter()

  // Preprocess functions
  casa_node_mgt_preprocess_page()
  casa_node_mgt_preprocess_node()
  casa_node_mgt_preprocess_field()

  // Hook entity functions
  casa_node_mgt_node_presave()
  casa_node_mgt_node_insert()
  casa_node_mgt_node_update()
  casa_node_mgt_node_delete()
  update_community_identification()
  calculate_identification_reliability()

  // General utility functions
  record_observation_localities_to_taxa()
*/


module_load_include('inc', 'casa_node_mgt', 'casa_habitat_mgt');
module_load_include('inc', 'casa_node_mgt', 'node_forms');
module_load_include('inc', 'casa_node_mgt', 'node_queries');
module_load_include('inc', 'casa_node_mgt', 'node_creation');
module_load_include('inc', 'casa_node_mgt', 'node_preprocessors');
module_load_include('inc', 'casa_node_mgt', 'node_crud_reactions');

define("ID_SOURCE_CASABIO_INDIVIDUAL", 1);
define("ID_SOURCE_CASABIO_COMMUNITY", 2);
define("ID_SOURCE_EXTERNAL", 3);

// ini_set('error_reporting', E_ALL);
// ini_set('display_errors', 'On');




// =============================================================================
/**
 * Implements hook_help(). Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
// function casa_node_mgt_help($path, $arg) {}





// =============================================================================
/**
 * Implements hook_init().
 */
function casa_node_mgt_init() {
  provide_node_info_to_js();
  // determine_taxa_localities_for_bulk_observations();
}





// =============================================================================
/**
 * Implements hook_menu().
 */
function casa_node_mgt_menu() {

  $items['ajax/observations/create-blank'] = array(
    // 'title'               => 'Casa Upload Summary',
    'page callback'       => 'create_blank_observations_callback',
    // 'page arguments'      => array('2'),
    'access callback'     => TRUE,
    'type'                => MENU_CALLBACK,
    'file'                => 'casa_node_mgt.module',
    'delivery callback'   => 'ajax_deliver',
  );

  $items['ajax/images/rotate'] = array(
    // 'title'               => 'Casa Upload Summary',
    'page callback'       => 'rotate_pictures_callback',
    // 'page arguments'      => array('2'),
    'access callback'     => TRUE,
    'type'                => MENU_CALLBACK,
    // 'file'                => 'casa_node_mgt.module',
    'delivery callback'   => 'ajax_deliver',
  );

  $items['ajax/observations/%/add_interaction'] = array(
    // 'title'               => 'Casa Upload Summary',
    'page callback'       => 'observations_add_interaction_callback',
    'page arguments'      => array(2),
    'access callback'     => TRUE,
    'type'                => MENU_CALLBACK,
    // 'file'                => 'casa_node_mgt.module',
    'delivery callback'   => 'ajax_deliver',
  );

  // $items['node/tooltip/%'] = array(
  //   'title'           => 'Node tooltip',
  //   'page callback'   => 'node_tooltip_callback',
  //   'page arguments'  => array(2),
  //   'access callback' => TRUE,
  //   'delivery callback' => 'deliver_raw_html',
  //   'type'            => MENU_NORMAL_ITEM,
  // );

  return $items;
}





/**
 * Callback function that creates observations for recording info without an associated picture.
 * Requires a form to be posted to this route's address.
 */
function create_blank_observations_callback() {
  $post = $_POST;
  // dpm($post, 'post');

  // $request_body = file_get_contents("php://input");
  // // $request_body = file_get_contents("drupal://input"); // Use inputstream module.
  // $post = json_decode($request_body, TRUE);
  // // dpm($post, '$post');

  $count = $post['count'];
  $collection_id = $post['collection-id'];

  create_blank_observations($count, $collection_id);

  $result = array('result' => 'success');
  $response = array('#type' => 'ajax', '#commands' => $result);

  return $response;
}



/**
 * Callback function that creates observations for recording info without an associated picture.
 *
 * @param $count
 * @param $collection_nid
 *
 * @return
 *   TRUE if the creation of the nodes is successful.
 *
 * @todo
 *   Determine if all nodes were created successfully (check return value from save()).
 */
function create_blank_observations($count, $collection_nid) {

  if (!is_valid_eid($collection_nid)) {
    throw new InvalidArgumentException("Parameter $collection_nid, " . $collection_nid . ", needs to be a valid NID.", 1);
  }

  global $user;
  $nu_to_create = $count;

  for ($i = 0; $i < $nu_to_create; $i++) {
    // print($i);
    $observation_raw = entity_create('node', array(
      'type' =>     'observation',
      'title' =>    '',
      'uid' =>      $user->uid,
      'status' =>   1, // Published
    ));

    $observation = entity_metadata_wrapper('node', $observation_raw);

    $observation->field_count->               set(1);
    $observation->field_collection->          set($collection_nid);

    $observation->save();
  }

  return TRUE;
}



/**
 * Menu callback that rotates images.
 * Requires the nid and degrees to be provided in the POST data.
 */
function rotate_pictures_callback() {
  $post = $_POST;
  // dpm($post, 'post');

  // $request_body = file_get_contents("php://input");
  // // $request_body = file_get_contents("drupal://input"); // Use inputstream module.
  // $post = json_decode($request_body, TRUE);
  // dpm($post, '$post1');

  $response = array(
    '#type' => 'ajax',
    '#commands' => $result,
  );

  $result = array(
    'result' => 'failure',
    'reason' => '',
  );

  $rotate_success;
  try {
    $rotate_success = rotate_pictures($post['nids'], $post['degrees']);
  }
  catch (Exception $e) {
    $result['reason'] = $e->getMessage();
  }
  // dpm($rotate_success, '$rotate_success');

  $result = $rotate_success ? 'success' : 'failure';

  $result = array('result' => $result);
  $response = array('#type' => 'ajax', '#commands' => $result);

  return $response;
}



/**
 * Determines if a given degrees is valid.
 *
 * @param $degrees
 *
 * @return
 *   TRUE if a valid degrees, FALSE otherwise.
 */
function is_valid_degrees($degrees) {
  // Test if it is numeric
  if (! is_numeric($degrees)) {
    return FALSE;
  }

  if(intval($degrees) <= -180 || intval($degrees) >= 360) {
    return FALSE;
  }

  return TRUE;
}



/**
 * Rotates images.
 * Requires the nid and degrees to be provided in the POST data.
 */
function rotate_pictures($nids, $degrees) {

  // Check that parameters supplied are valid

  foreach ($nids as $nid) {
    if (! is_valid_eid($nid)) {
      throw new InvalidArgumentException("One of the NIDs in parameter $nids, " . $nid . ", needs to be a valid NID.", 1);
    }
  }

  if (! is_valid_degrees($degrees)) {
    throw new InvalidArgumentException('Parameter $degrees must be between -180'
      . ' and +360; ' . $degrees . ' provided.', 1);
  }

  $result = array(
    'result' => 'failure',
    'reason' => '',
  );

  // $result['reason'] .= '; nids: ' . $nids;
  $nids = explode('|', $nids);
  $rotate_success;

  // Perform the rotation for each image
  foreach ($nids as $index => $nid) {
    // dpm($nid, '$nid');
    // dpm($degrees, '$degrees');
    $rotate_success = rotate_picture($nid, $degrees);
  }

  return $rotate_success;
}



function rotate_picture($nid, $degrees) {

  // Check that parameters supplied are valid

  if (! is_valid_eid($nid)) {
    throw new InvalidArgumentException("Parameter $nid, " . $nid . ", needs to be a valid NID.", 1);
  }

  if (! is_valid_degrees($degrees)) {
    throw new InvalidArgumentException('Parameter $degrees must be a number between -180'
      . ' and +360; ' . $degrees . ' provided.', 1);
  }

  // Fetch the image

  $node_raw =     node_load($nid);
  $node =         entity_metadata_wrapper('node', $node_raw);
  $image_info =   $node->field_image->value();
  $uri =          $image_info['uri'];
  $image =        image_load($uri, FALSE);
  // dpm($image, 'image');

  // Perform the rotation

  // $result['reason'] .= '; degrees: ' . $degrees;
  $background = 0x000000; // Black; transparent gives errorsâ€¦

  $rotate_success = image_rotate($image, $degrees, $background);
  // dpm($rotate_success, 'rotate_success');

  if ($rotate_success == FALSE) {
    return FALSE;
  }

  $save_success = image_save($image, NULL);
  // dpm($save_success, 'save_success');

  // Clear cached versions of the image file (in all styles).
  image_path_flush($uri);

  return $save_success;
}





// =============================================================================
/**
 * Implements hook_block_info().
 */
function casa_node_mgt_block_info() {
  $blocks = array();

  $blocks['habitat_form'] = array(
    'info' => t('Contribute habitat record form'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    // 'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}





// =============================================================================
/**
 * Implements hook_block_view().
 */
function casa_node_mgt_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'habitat_form':
      $block['subject'] = t('Contribute habitat record form');
      $block['content'] = habitat_form_block_view();
      break;
  }

  return $block;
}





/**
 * Implements hook_form_FORM_ID_alter(), for 'node_form' forms.
 */
function casa_node_mgt_form_node_form_alter(&$form, &$form_state, $form_id) {
  // dpm ($form, "form");
  // dpm ($form_state, "form_state");

  // Remove 'additional' node settings for non-administrators
  global $user;
  if (! in_array('Administrator', $user->roles)) {
    $form['additional_settings']['#access'] = FALSE;
  }

  module_load_include('inc', 'casa_node_mgt', 'node_forms');
  $form = form_node_form_alter($form, $form_state, $form_id);
  return $form;
}



/**
 * Custom form submit handler callback for identifications.
 */
function identification_form_submit($form, &$form_state) {
  // dpm('Called: identification_form_submit');
  // dpm ($form, "form");
  // dpm ($form_state, "form_state");

  // If the $form has been set to redirect, pass this to $form_state to ensure it happens.
  if (isset($form['redirect'])) {
    $form_state['redirect'] = $form['redirect']['#value'];
  }
}





function habitat_record_form_submit($form, &$form_state) {
  // dpm($form, "form");
  // dpm($form_state, "form_state");

  // Redirect back to the same page the user was on.
  // $form_state['rebuild'] = TRUE; // Doesn't work.
  $form_state['redirect'] = current_path();
}






// =============================================================================
//                                                Inline Entity Forms
/**
 * Implements hook_entity_info_alter().
 */
// function casa_node_mgt_entity_info_alter(&$entity_info) {
//   $entity_info['node']['inline entity form'][] = array(
//     'controller' => 'IdentificationInlineEntityFormController',
//   );
// }

function casa_node_mgt_inline_entity_form_table_fields_alter(&$fields, $context) {
  // dpm($fields, 'fields');
  // dpm($context, 'context');

  if ($context['field_name'] == 'field_identifications') {
    unset($fields['title']);
    unset($fields['status']);

    $fields['field_identified_species'] = array(
      'type' => 'field',
      'label' => t('Species'),
      'weight' => 1,
    );
    $fields['field_certainty'] = array(
      'type' => 'field',
      'label' => t('Certainty'),
      'weight' => 2,
    );
    // $fields['uid'] = array(
    //   'type' => 'property',
    //   'label' => t('User ID'),
    //   'weight' => 3,
    // );
  }
}



/**
 * Perform alterations before an entity form is included in the IEF widget.
 *
 * @param $entity_form
 *   Nested array of form elements that comprise the entity form.
 * @param $form_state
 *   The form state of the parent form.
 */
function casa_node_mgt_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // dpm($entity_form, 'entity_form');
  // dpm($form_state, 'form_state');

  if ($entity_form['#bundle'] == 'identification') {
    $language = 'und';

    unset($entity_form['title']);
    unset($entity_form['status']);

    $entity_form['field_identified_species'][$language]['add_more']['#value'] = 'Add species';
  }
}



/**
 * Implements hook_preprocess_page().
 */
function casa_node_mgt_preprocess_page(&$variables) {
  // dpm($variables, 'variables');
  // dpm($variables['node'], 'node');

  // Only continue if this is a node page
  if(!isset($variables['node'])) {
    return;
  }

  // Don't show the page title on node pages

  switch ($variables['node']->type) {
    case 'observation':
    case 'collection':
      // dpm('page is observation');
      $variables['title'] = '';
      break;
  }
  // $variables['site_name']
  // dpm($variables, 'variables');
}



/**
 * Implements hook_preprocess_node(). Overrides or inserts variables into the node templates.
 */
function casa_node_mgt_preprocess_node(&$variables, $hook) {
  // dpm('Called: casa_node_mgt_preprocess_node()');
  // dpm($variables, 'variables');
  // dpm($variables['node'], 'variables["node"]');

  // --------------------------------------------------------------------------
  //                                                  Teasers
  if ($variables['view_mode'] == 'teaser') {
    // Give teasers a view-mode class consistent with other view modes
    $variables['classes_array'][] = 'view-mode-teaser';

    $variables['content']['node_block_link'] = array(
      '#markup' => l('', 'node/' . $variables['nid'], array(
        'attributes' => array('class' => array('block'),),
      )),
    );

    // Disable links (which include 'View more' and 'Add comment')
    $variables['content']['links'] = array();
  }

  // --------------------------------------------------------------------------
  //                                                  Not 'full' view modes
  if ($variables['view_mode'] != 'full') {
    _preprocess_node_not_full($variables);
  }

  // --------------------------------------------------------------------------
  //                                                  Full view modes
  if ($variables['view_mode'] == 'full') {
    _preprocess_node_full($variables);
  }



  // --------------------------------------------------------------------------
  //                                                  Content types

  switch ($variables['type']) {

    case 'observation':
      _preprocess_observation($variables);
      break;

    case 'picture':
      _preprocess_picture($variables);

    case 'identification':
      _preprocess_identification($variables);
      break;

    case 'identification_community':
      _preprocess_identification_community($variables);
      break;

    case 'interaction':
      _preprocess_interaction($variables);
      break;

    case 'collection':
      _preprocess_collection($variables);
      break;

    case 'habitat_record':
      break;
  }

  // dpm($variables, 'variables after preprocess');
}





/**
 * Implements template_preprocess_field().
 */
function casa_node_mgt_preprocess_field(&$variables, $hook) {
  // dpm($variables, $variables['element']['#field_name'] . ' variables');

  // Switch on field name
  switch ($variables['element']['#field_name']) {
    case 'field_date_observed':
      $variables['label'] = '<span class="icon-calendar"></span> ' . $variables['label'];
      break;

    case 'field_collection':
      $variables['label'] = '<span class="icon-collections_bookmark"></span> ' . $variables['label'];
      break;

    case 'field_locality':
      $variables['label'] = '<span class="icon-location"></span> ' . $variables['label'];
      break;

    case 'field_count':
      // dpm($variables, '$variables');
      $variables['label'] = '<span class="icon-clipboard"></span> ' . $variables['label'];
      if ($variables['items'][0]['#markup'] === '1') {
        $variables['classes_array'][] = 'hidden';
      }
      break;

    case 'field_location':
      // dpm($variables, '$variables');
      break;
  }

  // Switch on field type
  switch ($variables['field_type_css']) {
    case 'entityreference':
      if (isset($variables['items'][0])) {
        if (isset($variables['items'][0]['#markup'])) {
          // dpm($variables['items'][0], "variables['items'][0]");
          $markup = $variables['items'][0]['#markup'];

          // If the markup is a link without text, set its text to "Unnamed"
          if (substr($markup, -5) == '></a>') {
            $variables['items'][0]['#markup'] =
              substr($markup, 0, -4)
              . 'Unnamed' . '</a>';
          }
        }
      }
      break;

    case 'geofield':
      // dpm($variables, "variables");
      
      $no_value_ph = array(
        '#markup' => '<em class="no-value">Location unknown</em>',
      );
      // If field has no value, add 'no value' placeholder (to replace blank map).
      if (isset($variables['element']['#items'][0])) {
        if (! array_key_exists('geom', $variables['element']['#items'][0])) {
          $variables['items'][0] = $no_value_ph;
        }
        elseif (! $variables['element']['#items'][0]['geom']) {
          $variables['items'][0] = $no_value_ph;
        }
      }
      else {
        $variables['items'][0] = $no_value_ph;
      }
      break;

    default:
      # code...
      break;
  }

  // field-type-entityreference
}



// =============================================================================
/**
 * Implements hook_node_presave().
 *
 * Called before _insert() or _update() hooks.
 */
function casa_node_mgt_node_presave($node) {
  // dpm($node, '$node in presave');
  

  switch ($node->type) {
    case 'identification':
      $identification = entity_metadata_wrapper('node', $node);
      $taxon = $identification->field_identified_species->value();
      // dpm($taxon, '$taxon');

      // Gives the identification a name based on taxon

      $current_title = $identification->title->value();

      if ($current_title == 'Untitled' || $current_title == '') {
        $new_title = $taxon->name;
        $identification->title->set($new_title);
      }
      break;

    case 'observation':
      filter_observation_reused_pictures($node);
      break;
  }
}



// =============================================================================
/**
 * Implements hook_node_insert(). Called for new nodes being saved.
 * Is called after a node has been 'saved', but before the database transaction happens.
 */
function casa_node_mgt_node_insert($node) {
  // dpm($node, 'node in insert');

  switch ($node->type) {
    case 'identification':
      $identification = entity_metadata_wrapper('node', $node);
      $observation = $identification->field_observation->value();
      // dpm($observation, '$observation');

      // If the identification doesn't reference an observation (it must)
      if (! $observation) {
        throw new Exception("Identifications must reference an observation.", 1);
      }
      
      // Finds all matching identifications by user, keeps only one.
      filter_identifications_to_one($node);
      // dpm('Finished filter_identifications_to_one()');

      // Updates matching community identification
      $comm_identi = update_matching_comm_identi($node);
      // dpm('Finished update_matching_comm_identi()');

      if ($observation) {
        update_observation_title_from_identi($observation);
        // dpm('Finished update_observation_title_from_identi()');
      }
      break;

    case 'identification_community':
      taxa_assess_community_identification($node);

      save_locality_to_taxon($node->nid);
      break;
  }
}



// =============================================================================
/**
 * Implements hook_node_insert(). Called for existing nodes being saved.
 * Is called after a node has been 'saved', but before the database transaction happens.
 */
function casa_node_mgt_node_update($node) {
  // dpm($node, 'node in update');

  switch ($node->type) {
    case 'identification_community':
      taxa_assess_community_identification($node);
      break;

    case 'observation':
      // dpm($node, 'update observation $node');
      save_observation_locality_to_taxon($node->nid);
      record_observation_localities_to_taxa($node->nid);
      break;

    default:
      # code...
      break;
  }
}



// =============================================================================
/**
 * Implements hook_node_delete().
 */
function casa_node_mgt_node_delete($node) {
  // dpm($node, 'node in update');

  switch ($node->type) {
    case 'observation':
      // Find and delete observation's identifications (both types).
    
      $identifications = get_identifications_refing_observation(NULL, $node->nid, NULL, NULL);
      // dpm($identifications, '$identifications');
      foreach (array_keys($identifications) as $nid) {
        node_delete($nid);
      }

      // @todo Find and delete observation's interactions
      // Check that this works before using!!
      // $interactions = get_referencing_nodes(
      //   'interaction',
      //   'field_observation',
      //   'target_id',
      //   $nid);
      // foreach (array_keys($identifications) as $nid) {
      //   node_delete($nid);
      // }

      break;

    case 'picture':
      // 
      break;

    case 'interaction':
      // 
      break;

    case 'identification':
      // @todo Recalculate community interaction, or delete if has no more interactions.
      break;

    case 'identification_community':
      // @todo Rename observations based on comm. ids that remain.
      break;

    default:
      # code...
      break;
  }
}




/**
 * For community identifications.
 *
 * Score is calculated as an average of the certainties of each identification,
 * weighted by the identification's contributor's reliability relative to other contributors.
 *
 * Basically, if contributor A has a reliability 1/8th of contributor B,
 * his certainty will affect the calculated reliability 1/8th as much.
 *
 * @todo
 *   Rewrite this function.
 *
 * @param $identifications
 *   Identifications (of one taxon) that reference one observation.
 */
function calculate_identification_reliability($identifications) {

  $owners_reliabilities = [];

  $certainty_data = array();

  foreach ($identifications as $nid) {
    $identification = entity_metadata_wrapper('node', $nid);
    // dpm($identification->raw(), '$identification->raw()');

    $certainty = $identification->field_certainty->value() * 10; // * 10 because it is saved as a number between 0 and 10, not as a fraction.
    // dpm($certainty, 'certainty');
    $certainty_data[$nid]['certainty'] = $certainty;


    global $user;
    // If the $identification_raw has an owner (if it's not new), use it, otherwise use global $user.
    $uid = $identification->author->value()->uid ?
      $identification->author->value()->uid :
      $user->uid;
    $owner_user = entity_metadata_wrapper('user', user_load($uid));
    // dpm($owner_user, 'owner_user');

    $owner_reliability = $owner_user->field_reliability->value();
    // dpm($owner_reliability, '$owner_reliability');

    // If owner reliability isn't greater than 0, set it to 10%.
    $owner_reliability = $owner_reliability > 0 ? $owner_reliability : 10;
    // dpm($owner_reliability, '$owner_reliability');
    $owners_reliabilities[] = $owner_reliability;
    $certainty_data[$nid]['reliability'] = $owner_reliability;
  }
  // dpm($certainty_data, '$certainty_data');
  // dpm($owners_reliabilities, '$owners_reliabilities');

  $reliabilities = [];

  foreach ($certainty_data as $nid => $data) {
    // Score = certainty weighted by contributor's relative reliability
    $reliabilities[] = $data['certainty']
      * $data['reliability'] / array_sum($owners_reliabilities) * count($owners_reliabilities);
  }
  // dpm($reliabilities, '$reliabilities');

  $reliability = array_sum($reliabilities) / count($reliabilities);
  // dpm($reliability, 'reliability');

  return $reliability;
}





/**
 * Adds an interaction to an observation, creating a second observation and
 * identification (of given species) in the process.
 *
 * @param $nid
 *   The nid of the observation that the interaction is for.
 * @param $params (via JSON in the HTTP request body)
 *   an array: [identifiedSpecies, certainty, interactionActivity, body]
 */
function observations_add_interaction_callback($nid) {

  $request_body = file_get_contents("php://input");
  // $request_body = file_get_contents("drupal://input"); // Use inputstream module.
  $params = json_decode($request_body, TRUE);
  // dpm($post, '$post');

  $interaction = observation_add_interaction($nid, $params);
  // dpm(json_encode($interaction), 'json_encode($interaction)');


  // Get the interaction from API (as JSON)

  $handler = restful()
    ->getResourceManager()
    ->getPlugin('interactions:0.1');

  $query['filter'] = array('id' => $interaction->nid);

  $get_result = restful()
    ->getFormatterManager()
    ->format($handler->doGet('', $query));

  $interaction_as_json = json_decode($get_result)->data; // Not using


  $result = array('data' => $interaction_as_json);
  $response = array('#type' => 'ajax', '#commands' => $result);

  return $response;
}




/**
 * Used by show_field_indicators() function of edit_selected.js
 */
function provide_node_info_to_js() {

  $fields_output = array();

  // Get a lightweight map of fields across bundles.
  $field_map = field_info_field_map();
  // dpm($field_map, '$field_map');

  foreach ($field_map as $field_name => $field_mapped_info) {

    switch ($field_mapped_info['type']) {

      case 'list_text':
        $field_info = field_info_field($field_name);
        // dpm($field_info, $field_name . ' $field_info');
        $fields_output[$field_name]['allowed_values'] = $field_info['settings']['allowed_values'];
        break;

      case 'taxonomy_term_reference':
        $field_info = field_info_field($field_name);
        // dpm($field_info, $field_name . ' $field_info');

        $vocab_name = $field_info['settings']['allowed_values'][0]['vocabulary'];
        $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
        // dpm($vocab, '$vocab');
        if ($vocab_name != 'taxa') {
          // $tree = taxonomy_get_tree($vocab, 0, NULL, FALSE);
          // dpm($tree, $field_name . ' $tree');

          $term_tids = get_tids_of_vocab($vocab->vid);
          // dpm($term_tids, $field_name . ' $term_tids');
          $terms = taxonomy_term_load_multiple(array_keys($term_tids));
          // dpm($terms, $field_name . ' $terms');

          foreach ($terms as $tid => $term) {
            $fields_output[$field_name]['terms'][$tid] = $term->name;
          }

        }
        // dpm($fields_output[$field_name], $field_name . ' $fields_output[]');

        break;
    }

  }

  // dpm($fields_output, '$fields_output');

  // Pass this array to the JS
  drupal_add_js(array('node_info' => array(
    'fields_info' => $fields_output,
  ),), 'setting');
}



function get_tids_of_vocab($vocabulary) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', (int) $vocabulary, '=')
    ->execute();
  return $result['taxonomy_term'];
}







/**
 * Runs through all observations and saves their localities to each identified taxon.
 */
function determine_taxa_localities_for_bulk_observations() {
  $observations = get_observations_with_localities(1000);
  // dpm($observations, '$observations');
  // $observations = [];

  // For each observation
  foreach ($observations as $observation_nid => $node_representation) {
    save_observation_locality_to_taxon($observation_nid);
  }
}



// function node_tooltip_callback($nid = '') {
//   if (! $nid) {
//     return NULL;
//   }

//   return '<span>tooltip</span>';
// }


/**
 * Called when an observation is updated.
 * Saves the observation's localities to all identified species.
 * Problem; observations' localities (chosen by contributors) could be wrong.
 * Problem; observations' localities isn't a good indication of taxon's range!
 * Problem; this function can only add localities, not remove them.
 */
function record_observation_localities_to_taxa($nid) {

  // Record whether all community identifications are updated successfully.
  $is_all_recordings_successful = TRUE;

  $observation = entity_metadata_wrapper('node', $nid);
  // Save its localities
  $localities = $observation->field_locality->value();
  // dpm($localities, 'observation $localities');

  // Fetch it's community identifications
  $comm_id_representations = get_identifications_refing_observation('identification_community', $nid);
  // dpm($comm_id_representations, '$comm_id_representations');
  
  foreach ($comm_id_representations as $cir_nid => $comm_id_representation) {

    // Load its taxon
    $comm_id_representation = entity_metadata_wrapper('node', $cir_nid);
    $taxon_raw = $comm_id_representation->field_identified_species->value();

    if (! $taxon_raw) {
      continue;
    }

    $is_success = taxon_update_localities($taxon_raw->tid);

    if (! $is_success) {
      $is_all_recordings_successful = FALSE;
    }
  }

  return $is_all_recordings_successful;
}



/**
 * Fetch all its observations, calculate range based on occurances in each locality.
 */
function taxon_update_localities($tid) {
  // dpm($tid, '$tid');

  $localities = array();

  $observations_nids = get_observations_referencing_taxon($tid);
  // dpm($observations_nids, '$observations_nids');

  foreach ($observations_nids as $observation_nid) {
    $observation = entity_metadata_wrapper('node', $observation_nid);
    $observation_localities = $observation->field_locality->value();

    $localities = array_merge($localities, $observation_localities);
  }
  // dpm($localities, '$localities');

  // Create an array of all localities keyed by tids.
  // This ensures no duplicates, since duplicates would use the same key.
  $localities_w_keys = [];
  foreach ($localities as $locality) {
    $localities_w_keys[$locality->tid] = $locality;
  }
  // dpm($localities_w_keys, '$localities_w_keys');

  $taxon = entity_metadata_wrapper('taxonomy_term', $tid);
  
  // Save localities to taxon
  // Get's array values because that's the array format expected.
  $taxon->field_localities->set(array_values($localities_w_keys));

  $taxon_localities = $taxon->field_localities->value();
  // dpm($taxon_localities, '$taxon_localities');

  $is_success = $taxon->save();
  return $is_success;
}



/**
 * Implements hook_query_TAG_alter().
 *
 * Filters an EntityFieldQuery to get only taxa that do not have pictures.
 */
function casa_node_mgt_query_has_no_pictures_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_pictures', 'p', 'taxonomy_term_data.tid = p.entity_id');
  $query->isNull('p.entity_id');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Orders results of an EntityFieldQuery randomly.
 */
function casa_node_mgt_query_random_alter($query){
  $query->orderRandom();
} 



/**
 * Checks pictures to be referenced by an observation, and removes them if 
 * they are already referenced by another observation.
 *
 * Note that this function DOES NOT save the observation, because it is expected
 * to be called by a hook_presave() function.
 */
function filter_observation_reused_pictures($observation_raw) {
  // dpm($observation_raw, '$observation_raw');

  $observation = entity_metadata_wrapper('node', $observation_raw);
  $pictures = $observation->field_pictures_observation->raw();
  // dpm($pictures, '$pictures');

  $pictures_to_keep = [];

  // Loop through pictures of this observation
  foreach ($pictures as $pic_nid) {
    $observations = array_keys(get_observations_referencing_pic($pic_nid));
    // dpm($observations, '$observations');

    $is_refed_by_other = FALSE;

    // Loop through each observation referencing picture
    foreach ($observations as $observation_nid) {
      // If the observation isn't this (parameter) observation
      if ($observation_nid !== intval($observation_raw->nid)) {
        $is_refed_by_other = TRUE;
      }
    }
    if ($is_refed_by_other) {
      $message = t('Picture @nid is referenced by another observation, so '
        . 'cannot be referenced by this observation.',
        array('@nid' => $pic_nid));
      // drupal_set_message($message, 'warning', FALSE);
      watchdog('Casa node management', $message, NULL, WATCHDOG_WARNING);
    }
    else {
      $pictures_to_keep[] = $pic_nid;
    }
  }
  // dpm($pictures_to_keep, '$pictures_to_keep');
  $pictures = $observation->field_pictures_observation->set($pictures_to_keep);
}