<?php
/**
 * @file
 * Miscellaneous functions that deal with taxonomy terms.
 */

use Drupal\Casabio\casa_core;



/**
  CONTENTS

  [NU] = Function is not currently used

  // Generic module hook functions()
  casa_term_mgt_menu()
  casa_term_mgt_init()

  casa_term_mgt_preprocess_page()
  casa_term_mgt_process_page()
  casa_term_mgt_preprocess_taxonomy_term()
  casa_term_mgt_process_taxonomy_term()

  taxa_lookup_page_callback()
  taxa_lookup_multiple_page_callback()

  create_taxon()
  contribute_habitat_page_callback()
  contribute_taxon_etymology_page_callback()
  casa_term_mgt_form_taxonomy_form_term_alter()
  correct_invalid_entity_fields()
  
  bulk_taxa_upload()
  taxa_lookup_multiple()
  import_etymologies_page_callback()

  casa_term_mgt_taxonomy_term_presave()

  get_localities_hierarchical()
 */


module_load_include('inc', 'casa_term_mgt', 'includes/term_preprocessors');
module_load_include('inc', 'casa_term_mgt', 'includes/term_queries');
module_load_include('inc', 'casa_term_mgt', 'includes/term_forms');
module_load_include('inc', 'casa_term_mgt', 'includes/term_lookups');
module_load_include('inc', 'casa_term_mgt', 'includes/import_etymologies');
module_load_include('inc', 'casa_term_mgt', 'includes/browse_taxa_tree');
module_load_include('inc', 'casa_term_mgt', 'includes/taxa_assess_pictures');

// define("ID_SOURCE_CASABIO_INDIVIDUAL", 1);



/**
 * Implements hook_menu().
 */
function casa_term_mgt_menu() {
  $items['services/taxa/get-children/%'] = array(
    'title'             => 'Taxa Children',
    'page callback'     => 'provide_taxa_children_callback',
    'page arguments'    => array(3),
    'delivery callback' => 'ajax_deliver', // Instantiated in Casa Core module
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
  );

  $items['taxa/lookup'] = array(
    'title'             => 'Lookup Taxa',
    'page callback'     => 'taxa_lookup_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['taxa/lookup-multiple'] = array(
    'title'             => 'Lookup Taxa Multiple',
    'page callback'     => 'taxa_lookup_multiple_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );
  // http://162.13.13.42/webservices/status/query/key/94f7d149dd770d108962413a369b62e0/genus/Tabebuia


  $items['browse/taxa'] = array(
    'title'             => 'Taxa Tree Browser',
    'page callback'     => 'browse_taxa_tree_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['taxa/import/etymologies'] = array(
    'title'             => 'Import Etymologies',
    'page callback'     => 'import_etymologies_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  return $items;
}



/**
 * Implements hook_init().
 */
function casa_term_mgt_init() {}



/**
 * Implements hook_preprocess_page(). Alternatively try hook_taxonomy_term_view_alter()?
 */
function casa_term_mgt_preprocess_page(&$variables, $hook){
  // dpm($variables, 'preprocess_page variables');

  $is_term_page = isset($variables['page']['content']['system_main']['term_heading']);

  if ($is_term_page) {
    $term = $variables['page']['content']['system_main']['term_heading']['term']['#term'];
    // dpm($term, 'term');
    $vocabulary = $term->vocabulary_machine_name;

    if ($vocabulary == 'taxa') {

      // If taxon has no identifications
      if (isset($variables['page']['content']['system_main']['no_content'])) {
        // Show message instead.
        // $variables['page']['content']['system_main']['no_content']['#markup'] =
        //   'There aren’t any identifications of ' . $term->name . '.';

        $variables['page']['content']['system_main']['no_content'] = [];
      }
      else {
        // Hide 'list' of referencing entities (shown on all term pages by default)
        $variables['page']['content']['system_main']['nodes'] = [];
        $variables['page']['content']['system_main']['pager'] = [];
      }
    }
  }
}



/**
 * Implements hook_process_taxonomy_term(). Alternatively try hook_taxonomy_term_view_alter()?
 */
function casa_term_mgt_process_page(&$variables, $hook){
  // dpm($variables, 'process_page variables');

  $is_term_page = isset($variables['page']['content']['system_main']['term_heading']);

  if ($is_term_page) {
    $term = $variables['page']['content']['system_main']['term_heading']['term']['#term'];
    // dpm($term, 'term');
    $vocabulary = $term->vocabulary_machine_name;

    $term = entity_metadata_wrapper('taxonomy_term', $term);
    // dpm($term->raw(), '$term->raw()');

    if ($vocabulary == 'taxa') {
      $rank = $term->field_taxon_rank->value();
      if ($rank) {
        // $variables['title'] = '<span class="prefix">' . $rank . '</span> '
        //   . $variables['title'];
        // $variables['title'] = $variables['title'] . '<span class="suffix">, ' . $rank . '</span>';
      } else {
        $variables['title'] = '<span class="prefix no-value">Unknown rank</span> '
          . $variables['title'];
      }
    }
  }
}



/**
 * Implements hook_preprocess_taxonomy_term().
 */
function casa_term_mgt_preprocess_taxonomy_term(&$variables) {
  _preprocess_taxonomy_term($variables);
}



/**
 * Implements hook_process_taxonomy_term().
 */
function casa_term_mgt_process_taxonomy_term(&$variables) {
  _process_taxonomy_term($variables);
}


/**
 * Implements template_preprocess_field().
 */
function casa_term_mgt_process_field(&$variables, $hook) {
  // dpm($variables, '$variables');
  switch ($variables['element']['#field_name']) {
    case 'field_vulnerability':
      // dpm($variables, '$variables');

      // If taxon has a rank, and if Genus, don't show vulnerability
      if ($variables['element']['#object']->field_taxon_rank) {
        $taxon_rank = $variables['element']['#object']->field_taxon_rank[LANGUAGE_NONE][0]['value'];
        if ($taxon_rank === 'genus' || $taxon_rank === 'Genus') {
          $variables['items'][0]['#markup'] = '';
          break;
        }
      }

      $vulnerability_key = $variables['element']['#items'][0]['value'];
      $vulnerability_val = $variables['items'][0]['#markup'];
      $variables['items'][0]['#markup'] = '<span class="'
        . $vulnerability_key . '" '
        . 'title="IUCN vulnerability status: ' . $vulnerability_val . '">'
        . $vulnerability_key . '</span>';
      break;
  }
}


/**
 * Callback.
 */
function taxa_lookup_page_callback() {
  // @todo Use Drupal's Flood system (common.inc) to ensure this isn't being abused.

  return drupal_get_form('taxa_lookup_form');
}


/**
 * Callback.
 */
function taxa_lookup_multiple_page_callback() {
  return drupal_get_form('taxa_lookup_multiple_form');
}


/**
 * @param $taxon_info
 *   An associative array of taxon info. Eg. $taxon_info = array('name', 'rank')
 * @param $show_message
 *   A boolean indicating if a message should be shown.
 */
function create_taxon($taxon_info, $show_message = TRUE) {
  // dpm($taxon_info, '$taxon_info');

  $term_data = array(
    'type' => 'taxon',
    'name' => $taxon_info['name'],
    'vocabulary_machine_name' => 'taxa',
    'vid' => 2, // vocabulary: Taxa
  );

  $term_raw = entity_create('taxonomy_term', $term_data);

  // dpm($term_raw, '$term_raw');
  update_taxon($term_raw, $taxon_info, TRUE);
  return $term_raw;
}


/**
 * @param $taxon_info
 *   An associative array of taxon info. Eg. $taxon_info = array('name', 'rank')
 * @param $show_message
 *   A boolean indicating if a message should be shown.
 */
function update_taxon($term_raw, $taxon_info, $show_message = TRUE, $update_mode = 'all') {
  // dpm($term_raw, '$term_raw');
  // dpm($taxon_info, '$taxon_info');

  $fields_updated = 0; // If any term values change.

  $term = entity_metadata_wrapper('taxonomy_term', $term_raw);

  $fields_updated +=
    update_taxon_field($term, $taxon_info['rank'], 'field_taxon_rank', $update_mode);

  $fields_updated +=
    update_taxon_field($term, [$taxon_info['parent']], 'parent', $update_mode);

  $fields_updated +=
    update_taxon_field($term, $taxon_info['num_children'], 'field_num_children', $update_mode);

  $fields_updated +=
    update_taxon_field($term, [$taxon_info['common_names']], 'field_common_names', $update_mode);

  $fields_updated +=
    update_taxon_field($term, $taxon_info['sc_name'], 'field_scientific_name', $update_mode);

  $fields_updated +=
    update_taxon_field($term, $taxon_info['canonical_name'], 'field_canonical_name', $update_mode);
  
  // dpm($term, '$term');

  // For bulk uploads, save locality
  if (array_key_exists('localities', $taxon_info)) {
    $fields_updated +=
      update_taxon_field($term, $taxon_info['localities'], 'field_localities', $update_mode);
  }

  $term->save();
  // dpm($term->raw(), '$term');

  if ($show_message) {
    $message_params = array(
      '@rank' => $taxon_info['rank'],
      '@taxon' => $taxon_info['name'],
      '@url' => base_path() . 'taxonomy/term/' . $term_raw->tid,);
    drupal_set_message(t('@rank <a href="@url">‘@taxon’</a> was successfully added to CasaBio.', $message_params), 'status', FALSE);
  }

  // dpm($fields_updated, '$fields_updated');
  if ($fields_updated > 0) {
    return $term;
  }
  else {
    return NULL;
  }
}


function update_taxon_field(&$term, $value, $field_machine_name, $update_mode) {
  // dpm($value, '$value');
  $field_updated = 0;

  // Check that the value provided isn't null
  if ($value !== NULL && $value !== [] && $value !== [0 => NULL]) {
    $current_value = $term->{$field_machine_name}->value();

    // If updating all fields, or updating empty fields and field is empty
    if (($update_mode === 'all') ||
      ($update_mode === 'empties') && (! $current_value)) {

      if ($current_value !== $value) {
        // dpm($field_machine_name, '$field_machine_name');
        $term->{$field_machine_name}->set($value);
        $field_updated = 1;
      }
    }
  }
  return $field_updated;
}



/**
 * Description
 */
function contribute_habitat_page_callback() {

  $content = "";

  module_load_include('inc', 'taxonomy', 'taxonomy.admin');
  $vocabulary = taxonomy_vocabulary_machine_name_load('habitats');
  $edit = array();
  $content = drupal_get_form('taxonomy_form_term', $edit, $vocabulary, ['form_view_mode' => 'contribute']);

  return $content;
}



/**
 * Provides content for the Contribute Etymology page.
 * Registered by contribute_menu().
 */
function contribute_taxon_etymology_page_callback($tid) {
  $content = "";

  $term = taxonomy_term_load($tid);
  // dpm($term, '$term');
  if (! $term) {
    return '<p>Please provide a correct taxon id in the url.</p>';
  }

  module_load_include('inc', 'taxonomy', 'taxonomy.admin');
  $vocabulary = taxonomy_vocabulary_machine_name_load('taxa');
  $edit = array();
  $content = drupal_get_form('taxonomy_form_term', $term, $vocabulary, ['form_view_mode' => 'etymology']);

  return $content;
}





/**
 * Implements hook_form_FORM_ID_alter(). Returns a simplified 'new term' form.
 */
function casa_term_mgt_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  // dpm('casa_term_mgt_form_taxonomy_form_term_alter()');
  // dpm($form, "form");
  // dpm($form_state, "form_state");
  // dpm($form_state['term'], "form_state['term']");

  // Remove 'additional' node settings for non-administrators
  global $user;
  if (! in_array('Administrator', $user->roles)) {
    $form['additional_settings']['#access'] = FALSE;
  }

  module_load_include('inc', 'casa_term_mgt', 'term_forms');
  form_taxonomy_form_term_alter($form, $form_state, $form_id);

  // Correct invalid field values, if this form is for an existing term
  if ($form_state['term']->tid) {
    correct_invalid_entity_fields('taxonomy_term', $form_state['term']);
  }
}



function correct_invalid_entity_fields($type, $entity) {

  switch ($type) {
    case 'taxonomy_term':
      $term = entity_metadata_wrapper('taxonomy_term', $entity);
      // dpm($term->raw(), "term->raw()");

      if (isset($term->field_range)) {
        $range = $term->field_range->value();
        // dpm($range, "range");

        // Test if value is NULL (not valid) rather than 'GEOMETRYCOLLECTION EMPTY' (valid)
        if (is_null($range['geom'])) {
          $term->field_range->set(NULL); // Sets it to be blank correctly
          $term->save();
        }
      }
      break;
    
    default:
      # code...
      break;
  }
}



// module_load_include('inc', 'casa_term_mgt', 'taxa_upload_data');
function bulk_taxa_upload() {
  $file_url = drupal_get_path('module', 'casa_term_mgt') . '/taxa_upload_data.json';
  $taxa = json_decode(file_get_contents($file_url));
  // dpm($taxa, '$taxa');
  // $taxa = [];

  $taxa_service = 'col';

  taxa_lookup_multiple($taxa, $taxa_service);
}


function import_etymologies_page_callback() {

  return drupal_get_form('import_etymologies_form');
}




/**
 * Implements hook_query_TAG_alter().
 */
function casa_term_mgt_query_condition_field_value_null_alter(QueryAlterableInterface $query) {
  // dpm($query, '$query');
  $table_name = 'field_data_' . $query->alterMetaData['field_name'];
  // dpm($table_name, '$table_name');
  $column_name = $query->alterMetaData['field_name'] . '_' . $query->alterMetaData['field_value_label'];
  // dpm($column_name, '$column_name');

  $query->leftJoin($table_name, 'o', 'taxonomy_term_data.tid = o.entity_id');
  $query->isNull('o.' . $column_name);
  // dpm($query, '$query');
}



/**
 * Implements hook_taxonomy_term_presave().
 */
function casa_term_mgt_taxonomy_term_presave($term_unsaved) {
  // dpm($term_unsaved, '$term_unsaved');
  
  $existing_term_raw = taxonomy_term_load($term_unsaved->tid);
  // dpm($existing_term_raw, '$existing_term_raw');

  if ($existing_term_raw && $existing_term_raw->vocabulary_machine_name === 'taxa') {
    update_term_history($term_unsaved, $existing_term_raw);
  }
}



/**
 * If any change has been made that should be saved to history, save it.
 *
 * @param $term_unsaved
 * @param $existing_term_raw
 */
function update_term_history($term_unsaved, $existing_term_raw) {
  // return NULL;
  
  $term = entity_metadata_wrapper('taxonomy_term', $term_unsaved);
  // dpm($term->raw(), '$term->raw()');

  $existing_term = entity_metadata_wrapper('taxonomy_term', $existing_term_raw);
  // dpm($existing_term->raw(), '$existing_term->raw()');

  $taxon_historian = new casa_core\historian($term);

  global $user;
  // dpm($user, '$user');
  $user_wrapped = entity_metadata_wrapper('user', $user->uid);
  // dpm($user_wrapped->raw(), '$user_wrapped->raw()');


  // Term events (saved to the term's History field)
  
  $term_events = [];

  // If scientific name is changed
  
  $is_sc_name_changed = ($term->field_scientific_name->value()
    !== $existing_term->field_scientific_name->value());
  // dpm($is_sc_name_changed, '$is_sc_name_changed');

  if ($is_sc_name_changed) {
    $taxon_historian->addEvent(time(), 'Updated scientific name', $user->uid, FALSE);
  }


  // User History

  $user_wrapped = entity_metadata_wrapper('user', $user);
  $user_historian = new casa_core\historian($user_wrapped);

  // User events (saved to the user's History field)

  $user_events = [];
  
  if (! property_exists($user, 'field_history')) {
    return NULL;
  }

  // If etymology is changed
  
  $is_etymology_changed = ($term->field_etymology->value()
    !== $existing_term->field_etymology->value());
  // dpm($is_etymology_changed, '$is_etymology_changed');

  if ($is_etymology_changed) {
    $action = ($existing_term->field_etymology->value()) ?
      'Updated etymology' : 'Added etymology';

    $user_historian->addEvent(time(), $action, $user->uid, FALSE);
  }
}



/**
 * Implements hook_taxonomy_term_update().
 */
function casa_term_mgt_taxonomy_term_update($term) {}



function get_taxa_rank_children_suffix($rank) {
  switch ($rank) {
    case 'kingdom':
      $children_suffix = 'phyla';
      break;

    case 'phylum':
      $children_suffix = 'classes';
      break;

    case 'class':
      $children_suffix = 'orders';
      break;

    case 'order':
      $children_suffix = 'families';
      break;

    case 'family':
      $children_suffix = 'genera';
      break;

    case 'tribe':
      $children_suffix = 'genera';
      break;

    case 'genus':
      $children_suffix = 'species';
      break;

    case 'species':
      $children_suffix = 'lower taxa';
      break;

    default:
      $children_suffix = '';
      break;
  }
  return $children_suffix;
}


/**
 * Gets the name of the family.
 */
function get_family($observation) {
  $identification = calc_most_reliable_comm_identi($observation->raw());
  // dpm($identification, '$identification');

  if (! $identification) {
    return NULL;
  }
  $taxon = entity_metadata_wrapper('taxonomy_term', $identification->field_identified_species->value());
  // dpm($taxon->raw(), '$taxon');
  if (strtolower($taxon->field_taxon_rank->value()) == 'genus') {
    // dpm('is genus');
    $parents = taxonomy_get_parents($taxon->getIdentifier());
    // dpm($parents, '$parents');
    $family = reset($parents);
    return $family;
  }
  elseif (strtolower($taxon->field_taxon_rank->value()) == 'species') {
    // dpm('is species');
    $parents = taxonomy_get_parents($taxon->getIdentifier());
    // dpm($parents, '$parents');
    if (! count($parents)) {
      return NULL;
    }
    $genus_tid = array_keys($parents)[0];
    $genus_parents = taxonomy_get_parents($genus_tid);
    $family = reset($genus_parents);
    return $family;
  }
  else {
    return NULL;
  }
}


function get_localities_hierarchical($observation) {
  $locality_text = '';
  $localities = $observation->field_locality->value();
  // dpm($localities, '$localities');
  $locality = reset($localities);
  if ($locality) {
    $locality_text = $locality->name;
    $locality_ancestors = taxonomy_get_parents_all($locality->tid);
    // dpm($locality_ancestors, '$locality_ancestors');
    if (count($locality_ancestors) > 1) {
      foreach ($locality_ancestors as $key => $locality_ancestor) {
        if ($key == 0) {
          continue;
        }
        $locality_text .= ', ' . $locality_ancestor->name;
      }
    }
    return $locality_text;
  }
  else {
    return NULL;
  }
}



/**
 * Runs through taxa that have not been updated recently and updates them according to GBIF data.
 */
function batch_update_taxa() {
  $batch_size = 500;

  $tids1 = get_taxa_without_sc_name($batch_size);
  $tids1 = $tids1 ? array_keys($tids1) : [];
  // dpm($tids1, "tids1");
  // dpm(count($tids1) . ' results');

  $tids2 = get_taxa_without_history($batch_size - count($tids1));
  $tids2 = $tids2 ? array_keys($tids2) : [];
  // dpm($tids2, '$tids2');
  // dpm(count($tids2) . ' results');

  $tids = array_merge($tids1, $tids2);
  // dpm($tids, '$tids');

  $taxa = taxonomy_term_load_multiple($tids);
  // dpm($taxa, '$taxa');
  $taxa_names = [];
  foreach ($taxa as $term) {
    $taxa_names[] = $term->name;
  }
  // dpm($taxa_names, '$taxa_names');

  $taxa = taxa_lookup_multiple($taxa_names, 'gbif', 'empties', NULL, FALSE);

  watchdog('casa_core', 'Batch of updating ' . $batch_size . ' taxa completed successfully.', array(), WATCHDOG_NOTICE, 'link');
}