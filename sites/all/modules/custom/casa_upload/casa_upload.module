<?php
/**
 * @file
 * Bulk Media Upload Module
 */





/**
 * Help page for bulk media upload
 */
// function casa_upload_help($path, $arg) {
//   if ($path == 'admin/help#casa_upload') {
//     return '';
//   }
//   return '';
// }


  require 'vendor/autoload.php';

  use Monolog\Logger;
  use PHPExiftool\Reader;
  use PHPExiftool\Driver\Value\ValueInterface;





/**
 * Implements hook_menu().
 */
function casa_upload_menu() {

  $items['services/contribute/save-uploaded'] = array(
    'page callback'     => 'save_uploaded_file_callback',
    'access callback'   => 'user_access',
    'access arguments'  => array('can contribute content'),
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  $items['services/collections/%'] = array(
    'page callback'     => 'get_collections_by_user_callback',
    'page arguments'    => array(2),
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  // $items['contribute/upload/summary'] = array(
  //   'title'             => 'Casa Upload Summary',
  //   'page callback'     => 'drupal_get_form',
  //   'page arguments'    => array('casa_upload_summary'),
  //   'access arguments'  => array('bulk upload media'),
  //   'type'              => MENU_LOCAL_ACTION,
  //   'file'              => 'casa_upload.summary.inc',
  // );

  // dpm($items);
  return $items;
}



function casa_upload_init() {
  $upload_page_path = 'contribute/upload';
  $is_upload_page = drupal_match_path(current_path(), $upload_page_path) ? true : false;

  if ($is_upload_page) {
    // Include this module's JS file
    $js_file = drupal_get_path('module', 'casa_upload') . '/scripts/casa_upload.js';
    drupal_add_js($js_file);
  }


  // ================================================== TEST code

  // $handler = restful()
  //   ->getResourceManager()
  //   ->getPlugin('pictures:0.1');

  // $query['filter'] = array('id' => '68100');
  // $result = restful()
  //   ->getFormatterManager()
  //   ->format($handler->doGet('', $query));

  // dpm(json_decode($result), '$result');

  // ==================================================
}





/**
 * Form for bulk media upload
 */
function get_upload_form_content() {
  // global $language;

  // // Create the collection node
  // $values = array(
  //   'type' =>     'collection',
  //   'status' =>   1,
  //   'comment' =>  0,
  //   'promote' =>  0,
  // );
  // $collection = entity_create('node', $values);

  // module_load_include('inc', 'node', 'node.pages');
  // $form = drupal_get_form('collection' . '_node_form', $collection, ['form_view_mode' => 'contribute']);

  $file_url = drupal_get_path('module', 'casa_upload') . '/intro.html';
  $intro_markup = file_get_contents($file_url);

  // Get the secondary toolbar
  $secondary_toolbar_file_url = drupal_get_path('module', 'edit_selected')
    . '/markup/pictures_toolbar_secondary.html';

  $content = array(
    'intro' => array(
      '#type' => "fieldset",
      '#title' => t('How this works'),
      '#collapsible' => TRUE,
      '#collapsed' => /*FALSE*/TRUE,
      '#attributes' => array (
        'class' => array('intro', 'collapsible collapsed'),
      ),
      '#attached' => array(
        'library' => array(
          array('system', 'drupal.collapse'),
        ),
      ),
      'intro' => array(
        '#markup' => $intro_markup,
      ),
    ),

    'collection_choice' => array(
      '#title' => t('Choose the collection'),
      // '#type' => 'container',
      '#prefix' => '<label>1. Choose the collection</label>'
        . '<div id="collection_choice" class="cols choice-block">',
      '#suffix' => '</div>',

      'new' => array(
        '#prefix' => '<div data-option-id="new" aria-selected>',
        '#suffix' => '</div>',
        'checkbox' => array(
          '#type' => 'checkbox',
          '#title' => t('Create new collection'),
          '#title_display' => 'after',
          '#return_value' => 'new',
          '#attributes' => array(
            'checked' => 'checked',
          ),
        ),
        'fields' => array(
          '#type' => 'container',
          'textfield' => array(
            '#type' => 'textfield',
            '#title' => t('Name the collection'),
            '#title_display' => 'invisible',
          ),
          'accept' => array(
            '#type' => 'submit',
            '#value' => t('Create'),
            '#title_display' => 'invisible',
          ),
          '#attributes' => array(
            'class' => array('children-inline'),
          ),
        ),
        '#attributes' => array (
          'class' => array('option-new'),
        ),
      ),

      'existing' => array(
        '#prefix' => '<div data-option-id="existing">',
        '#suffix' => '</div>',
        'checkbox' => array(
          '#type' => 'checkbox',
          '#title' => t('Add to a collection'),
          '#title_display' => 'after',
          '#return_value' => 'existing',
        ),
        // 'textfield' => array(
        //   '#type' => 'textfield',
        //   '#title' => t('Search for a collection'),
        //   '#title_display' => 'invisible',
        // ),
        'selection' => array(
          '#type' => 'select',
          // '#title' => t('Selected'),
          '#options' => array(
            'none' => t('- select a collection -'),
          ),
          'title_display' => 'invisible',
          '#default_value' => 'none',
          // '#description' => t(''),
        ),
      ),
    ),

    'uploader' => array(
      // '#title' => t('Upload your pictures'),
      '#prefix' => '<label>2. Upload your pictures</label>',
      // '#description' => t('Add your photographs of your observations.'),
      '#type' => 'container',
      'plupload' => array(
        '#type' => 'plupload',
        '#required' => TRUE,
        '#autoupload' => TRUE, // Doesn't work
        // '#autosubmit' => FALSE,
        '#id' => 'uploader',
        '#plupload_settings' => array(
          // 'runtimes' => 'html5,flash,html4',
          // 'chunk_size' => '1mb',
        ),
        // '#submit_element' => '#id-of-your-submit-element',
        '#upload_validators' => array(),
        // '#event_callbacks' => array(
        //   'FilesAdded' => 'Drupal.mymodule.filesAddedCallback',
        //   'UploadComplete' => 'Drupal.mymodule.uploadCompleteCallback',
        // ),
      ),
      '#attributes' => array(
        'id' => 'uploader',
        'aria-enabled' => 'false',
      ),
    ),

    'saved_pics' => array(
      '#markup' => '<label>3. Edit the pictures</label>'
        . '<div id="saved_pics" aria-enabled="false">'
        . file_get_contents($secondary_toolbar_file_url)
        .'<section class="saved-pics selectables"><ul></ul></section>'
        . '</div>'
    ),

    'edit_pics_form' => array(
      '#type' => 'container',
      'form' => get_edit_selected_form('picture'),
      '#attributes' => array(
        'title' => 'Edit Pictures',
        'class' => array('edit_form_wrapper'),
        'data-transform' => 'to-dialog',
        'data-width' => '800',
        'data-is-modal' => 'true',
        'data-is-resizable' => 'true',
      ),
    ),

    // 'form' => $form,
  );

  global $user;
  $collections_by_user = get_collections_by_user($user->uid);
  // dpm($collections_by_user, $collections_by_user);
  if ($collections_by_user) {
    foreach ($collections_by_user as $key => $collection) {
      $content['collection_choice']['existing']['selection']['#options']
        [$collection['id']] = $collection['attributes']['label'];
    }
  }
  else {
    // disable second option
    $content['collection_choice']['existing']['checkbox']
      ['#attributes']['disabled'] = TRUE;
    $content['collection_choice']['existing']['selection']
      ['#attributes']['disabled'] = TRUE;
  }
  // dpm($content, '$content');

  return /*$form*/ $content;
}



/**
 * @param $uid
 *   The collections author's user ID.
 *
 * @return
 *   An array as expected by ajax_deliver().
 */
function get_collections_by_user_callback($uid) {

  $nodes = get_collections_by_user($uid);

  $result = array(
    'result' => 'success',
    'data' => $nodes,
  );
  $response = array('#type' => 'ajax', '#commands' => $result);

  return $response;
}



function get_collections_by_user($uid) {

  if (!is_valid_eid($uid)) {
    throw new InvalidArgumentException("Parameter $uid, " . $uid . ", needs to be a valid UID.", 1);
  }

  $query = new EntityFieldQuery();

  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'collection')
    ->propertyCondition('uid', $uid)
    ->propertyOrderBy('nid', 'DESC')
    // ->addMetaData('account', user_load(1)) // Run the query as user 1.
  ;

  $result = $query->execute();

  if (! isset($result['node'])) {
    return NULL;
  }

  $nids = array_keys($result['node']);
  $nodes = [];

  foreach ($nids as $nid) {
    // $collection = node_load($nid);
    $collection = entity_metadata_wrapper('node', $nid);
    // dpm($collection->raw(), '$collection->raw()');
    $date = format_date($collection->created->value(), 'short');
    $num_pictures = $collection->field_count_pictures->value();
    $num_observations = $collection->field_count_observations->value();
    $nodes[] = array(
      'type' => 'collection',
      'id' => $nid,
      'attributes' => array (
        'label' => $date . '  ' . $collection->label() . ' (' . $num_pictures . ' pics, ' . $num_observations . ' obs)',
      ),
    );
  }

  return $nodes;
}




function save_uploaded_file_callback() {
  // throw new Exception("Error Processing Request", 1);

  $request_body = file_get_contents("php://input");
  // $request_body = file_get_contents("drupal://input"); // Use inputstream module.
  $post = json_decode($request_body, TRUE);
  // dpm($post, '$post');

  $collection = $post['collection'];
  $temp_name = $post['temp_name'];
  $file_name = $post['file_name'];

  // $file_path = '/var/www/html' . base_path() . file_directory_temp() . '/' . $temp_name . '.tmp';
  $file_path = DRUPAL_ROOT . '/' . file_directory_temp() . '/' . $temp_name . '.tmp';
  // dpm($file_path, '$file_path');


  // $exif = exif_read_data($file_path);
  $exif = casa_read_exif($file_path);
  // dpm($exif, "exif" ); // Shows a FileDateTime of now because the file has just been copied

  // $filehash = md5_file($path);
  // dpm($filehash, '$filehash');

  $temp_file = array(
    'tmppath' => 'temporary://' . $temp_name . '.tmp',
    'name' => $file_name,
    'exif' => $exif,
  );

  $picture = _casa_upload_generate_entity($temp_file, $collection);
  // dpm($picture->raw(), '$picture');

  $file_basic = $picture->field_image->raw();
  // dpm($file_basic, '$file_basic');
  $fid = $file_basic['fid'];
  $file = file_load($fid);
  // dpm($file, '$file');

  // Fetch the picture from the API

  $handler = restful()
    ->getResourceManager()
    ->getPlugin('pictures:0.1');

  $query['filter'] = array('id' => $picture->getIdentifier());
  $get_result = restful()
    ->getFormatterManager()
    ->format($handler->doGet('', $query));

  $picture_output = json_decode($get_result);
  // dpm($picture_output, '$picture_output');

  $response = array('#type' => 'ajax', '#commands' => $picture_output);

  return $response;
}




function casa_read_exif($file_path) {
  // dpm($file_path, '$file_path');

  $logger = new Logger('exiftool');
  $reader = Reader::create($logger);

  $metadatas = $reader->files($file_path)->getOneOrNull()->getMetadatas();
  $metadata_array = array();
  foreach ($metadatas as $metadata) {
    $metadata_array[$metadata->getTag() . ''] = $metadata->getValue()->asString();
  }
  // dpm($metadata_array, '$metadata_array');

  // return $exif;
  return $metadata_array;
}





/**
 * A replacement for the default form submission handler for node_form(). Saves a collection.
 */
function casa_upload_node_form_submit($form, &$form_state) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');
  save_uploaded_files($form, $form_state, $form_state['nid']);
}





/**
 * Saves file entities and picture nodes from uploaded files.
 * This function is called after the form's node (a collection) is saved.
 *
 * @param $collection
 *   The node ID of the collection that the pictures should reference.
 */
function save_uploaded_files($form, &$form_state, $collection) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');
  // dpm($collection, 'collection');

  $entity_type =  'node'; // variable_get('casa_upload_entity_type');
  $entity_info =  entity_get_info($entity_type);


  // Prepare the batch process.
  $placeholders = array('@entity_type' => $entity_info['label']);
  $batch = array(
    'title' =>          t('Turning files into pictures…', $placeholders),
    'error_message' =>  t('@entity_type generation has encountered an error.', $placeholders),
    'finished' =>       '_casa_upload_batch_finished',
    // 'file' =>           drupal_get_path('module', 'casa_upload') . '/casa_upload.upload.inc',
  );

  // // Old batch set; all done in one batch
  // foreach ($form_state['values']['upload'] as $tmpfile) {
  //   // dpm($tmpfile, 'tmpfile');
  //   $batch['operations'][] = array('_casa_upload_generate_entity', array(
  //     $tmpfile,
  //     $collection,
  //   ));
  // }

  // // dpm($batch);
  // batch_set($batch);

  $nu_files_uploaded = count($form_state['values']['upload']);
  $_SESSION['nu_files_uploaded'] = $nu_files_uploaded;
  // dpm($nu_files_uploaded, '$nu_files_uploaded');
  $nu_files_per_batch = 10;
  $nu_files_batched = 0;

  // Will loop once per batch
  while ($nu_files_batched < $nu_files_uploaded) {
    // dpm($nu_files_batched, 'new batch, $nu_files_batched');

    $is_finished = $nu_files_batched >= $nu_files_uploaded;

    $batch['operations'] = [];

    // Run up to $nu_files_per_batch times, or until all files have been bached.
    for ($i = 0; $i < $nu_files_per_batch && !$is_finished; $i++) {
      // dpm($nu_files_batched, '$nu_files_batched');
      $tmpfile = $form_state['values']['upload'][$nu_files_batched];
      // dpm($tmpfile, '$tmpfile');

      $batch['operations'][] = array('_casa_upload_generate_entity', array(
        $tmpfile,
        $collection,
      ));

      $nu_files_batched++;
      $is_finished = $nu_files_batched == $nu_files_uploaded;
    }

    if ($is_finished) {
      $batch['finished'] = '_casa_upload_last_batch_finished';
    }

    // dpm($batch, '$batch');
    batch_set($batch);
  }
}





/**
 * Internal function for entity generation. Gets called for each file that is 
 * uploaded: creates a node for it.
 *
 * @param $tmpfile
 * @param $collection_nid
 *   The node ID of the collection that the picture should reference.
 * @param $context
 *
 * @return boolean
 *   Returns true if entity is successfully created, or null otherwise.
 */
function _casa_upload_generate_entity($tmpfile, $collection_nid, &$context) {
  // dpm('Reached: _casa_upload_generate_entity');
  // dpm($tmpfile, '$tmpfile');

  if (!is_valid_eid($collection_nid)) {
    throw new InvalidArgumentException("Parameter $collection_nid, " . $collection_nid . ", needs to be a valid NID.", 1);
  }

  // Most of this function's code was copied from the bulk_media_upload module

  global $user;
  $entity_type =      'node'/*variable_get('casa_upload_entity_type')*/;
  $entity_info =      entity_get_info($entity_type);
  $mediafield_name =  'field_image'/*variable_get('casa_upload_mediafield')*/;
  $bundle =           'picture'/*variable_get('casa_upload_bundle')*/;
  $mediafield_info =  field_info_instance($entity_type, $mediafield_name, $bundle);

  // Save media file.
  $save_media_file_result = save_media_file($tmpfile, $mediafield_info);
  // dpm($save_media_file_result, '$save_media_file_result');

  $file = $save_media_file_result[0];
  $uri = $save_media_file_result[1];

  // Create the entity representing the file
  $entity = create_entity($entity_info, $entity_type, $bundle, $file);

  // Add reference to the file to the node, and account for default values submitted.

    add_file_reference($entity, $mediafield_name, $file);

    entity_save($entity_type, $entity);



  // Use exif information to set node's date and location fields

    // $test_node_raw = node_load(107);
    $picture = entity_metadata_wrapper('node', $entity);

    // dpm($picture->nid->value(), 'nid');

    $file_instance = file_stream_wrapper_get_instance_by_uri($uri);
    // dpm($file_instance, '$file_instance');

    // dpm($file_instance->realpath(), '$file_instance->realpath()');
    // $exif = exif_read_data($file_instance->realpath());
    // dpm($exif, "exif" ); // Shows a FileDateTime of now because the file has just been copied
    $exif = $tmpfile['exif'];
    // dpm($exif, "exif on tmpfile" ); // Shows a FileDateTime of now because the file has just been copied

    // dpm($cause_error);


    $date_time;
    if (function_exists('get_date_time')) {
      $date_time = get_date_time($exif);
      // dpm(get_date_time($exif), 'get_date_time($exif)');
    }
    if (isset($date_time)) {
      if ($date_time) {
        // dpm($date_time->getTimestamp(), 'date taken');
        $picture->field_date_taken->set($date_time->getTimestamp());
      }
    }

    $new_location = geofield_compute_values(array(
      // For exif_get_data()...
      // 'lat' => get_latitude($exif),
      // 'lon' => get_longitude($exif),
      // For ExifTool
      'lat' => floatval($exif['Composite:GPSLatitude']),
      'lon' => floatval($exif['Composite:GPSLongitude']),
    ), 'latlon');
    // dpm($new_location, 'new_location');
    // Must be in format: array('lat' => 44,'lon' => -93);

    $picture->field_location->set($new_location);

    $picture->field_collection->set($collection_nid);

    // Remove thumbnail image, which can't be encoded into JSON.
    unset($exif['Composite:ThumbnailImage']);
    
    $picture->field_exif->set(json_encode($exif));
    // dpm(json_encode($exif), 'json_encode($exif)');

    $picture->save();

    entity_save($entity_type, $entity);
  //

  $context['message'] = t('Importing: @filename', array('@filename' => $file->filename));
  $context['results']['ids'][] = $entity->$entity_info['entity keys']['id'];

  $context['results']['collection'] = $collection_nid;

  return $picture;
}



/**
 * 
 *
 * @param $tmpfile
 * @param $mediafield_info
 *
 * @return
 *   NULL if the save failed, or an array of the file and uri if it succeeded.
 */
function save_media_file($tmpfile, $mediafield_info) {
  global $user;
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  // dpm($scheme, '$scheme');
  $source = $tmpfile['tmppath'];
  // dpm($source, '$source');

  $directory = '';
  if(isset($mediafield_info['settings']['file_directory'])){
    $directory .= token_replace($mediafield_info['settings']['file_directory']) . '/';

    // If the directory isn't writable, or doesn't exist and can't be created, the upload will fail.
    $prepare_directory = file_stream_wrapper_uri_normalize($scheme . $directory);
    // dpm($prepare_directory, '$prepare_directory');

    if (!file_prepare_directory($prepare_directory, FILE_CREATE_DIRECTORY)) {
      drupal_set_message(t('The file directory @dir does not exist or is not writable. Please contact an administrator.', array('@dir' => $prepare_directory)), 'error');
      return NULL;
    }
  }

  $destination = file_stream_wrapper_uri_normalize($scheme . $directory . $tmpfile['name']);
  // dpm($destination, 'destination');

  $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);

  // Create the file object.
  $uri = file_stream_wrapper_uri_normalize($destination);

  $file = create_new_file($uri, $user);
  // dpm($file, 'file');

  return [$file, $uri];
}




/**
 * Creates an entity representing the file that has been saved in Drupal.
 *
 * @param $entity_info
 * @param $entity_type
 * @param $bundle
 * @param $file
 *
 * @return
 *   The created entity.
 */
function create_entity($entity_info, $entity_type, $bundle, $file) {
  global $user;

  $label_field = isset($entity_info['entity keys']['label']) ?
    $entity_info['entity keys']['label'] : 'name'; // Default label field to 'name'.

  // Create the new entity.
  $entity = entity_create($entity_type, array(
    $entity_info['entity keys']['bundle'] => $bundle,
    $label_field => $file->filename,
  ));

  // If the entity has a property tied to UID, set it so that, e.g., nodes will be assigned an author.
  $info = entity_get_property_info($entity_type);
  foreach ($info['properties'] as $property) {
    if (isset($property['schema field']) && $property['schema field'] == 'uid') {
      $entity->uid = $user->uid;
      break;
    }
  }
  entity_save($entity_type, $entity);

  return $entity;
}



/**
 * Creates a new Drupal file entity from a URI.
 * 
 * @param $uri
 *   The uniform resource indicator that indicates where the file is currently.
 * @param $user
 *   The user that should be set as the file's author.
 * 
 * @return
 *   A file object.
 */
function create_new_file($uri, $user) {

  // @TODO validate parameters
  // Validate $user by attempting to load it.

  $file = new StdClass;
  $file->uid = $user->uid;
  $file->filename = basename($uri); // @decide Should this be made 'safer'?
  $file->uri = $uri;
  $file->filemime = file_get_mimetype($uri);
  $file->filesize = @filesize($uri);
  $file->timestamp = REQUEST_TIME;
  // dpm($file->timestamp, 'timestamp');
  // $file->field_time_taken = REQUEST_TIME;
  $file->status = FILE_STATUS_PERMANENT;
  $file->is_new = TRUE;
  $file->status = FILE_STATUS_PERMANENT; // @decide Duplicate, mistake?
  file_save($file);
  return $file;
}



/**
 * Adds a reference to a file to the node's media field.
 *
 * @param $entity
 * @param $mediafield_name
 * @param $file
 * @param $lang
 *   (optional) A language code to use for...? Defaults to LANGUAGE_NONE.
 */
function add_file_reference($entity, $mediafield_name, $file, $lang = LANGUAGE_NONE) {
  $fieldinfo = field_info_field($mediafield_name);
  $filefields = array('image', 'file');

  $settings = array();
  $settings['fid'] = $file->fid;

  // Additional values for filefield (and imagefield).
  if(in_array($fieldinfo['module'], $filefields)){
    $settings['display'] = 1;
    $settings['description'] = '';
  };

  $entity->$mediafield_name = array($lang => array(0 => $settings));
}





/**
 * Finished function for batch.
 *
 * @param $success
 * @param $results
 * @param $operations
 */
function _casa_upload_batch_finished($success, $results, $operations) {
  // dpm($results, 'results');

  // $pictures_count = count($results['ids']);

  // drupal_set_message(t('@count @entity_types have been uploaded.',
  //   array(
  //     '@count' => $pictures_count,
  //     '@entity_type' => 'Picture',
  // )));
  $_SESSION['casa_upload_batch_result'] = $results;
}





/**
 * Finished function for batch.
 *
 * @param $success
 * @param $results
 * @param $operations
 */
function _casa_upload_last_batch_finished($success, $results, $operations) {

  // Call finished callback for last batch.
  _casa_upload_batch_finished($success, $results, $operations);

  // Display an upload results message
  drupal_set_message(t('@count @entity_types have been uploaded.',
    array(
      '@count' => $_SESSION['nu_files_uploaded'],
      '@entity_type' => 'Picture',
  )));

  // Auto-group pictures

  if (function_exists('auto_group_pictures')) {
    auto_group_pictures($results['collection'], 30);
  }

  // Update the results
  // $_SESSION['casa_upload_batch_result'] += $results;

  drupal_goto('contribute/multiple-observations/group/' . $results['collection']);
}
