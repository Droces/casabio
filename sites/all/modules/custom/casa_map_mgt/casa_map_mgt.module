<?php
/**
 * @file
 *   Casa Map Management module
 */



/**
  CONTENTS

  casa_map_mgt_init()
  casa_map_mgt_form_views_exposed_form_alter()
  casa_map_mgt_openlayers_object_preprocess_alter()
  casa_map_mgt_form_node_form_alter()
  setup_QDS_map_container()

  convert_geojson_points_to_qdss()
  convert_qdss_to_polygons()
  convert_qds_to_polygon()
  determine_QDS()
  determine_points_from_QDS()
  convert_QDS_to_WKT()
  create_point_collection()
  casa_map_mgt_leaflet_map_info()
 */



/**
 * Implements hook_menu().
 */
function casa_map_mgt_menu() {
  $items['explore/observations/map'] = array(
    'title'             => 'Explore Observations as Map',
    'page callback'     => 'explore_observations_map_callback',
    // 'page arguments'    => array('casa_upload_upload_form'),
    'access callback'   => TRUE,
    // 'access arguments'  => array('bulk upload media'),
    'type'              => MENU_NORMAL_ITEM, // MENU_CALLBACK,
  );

  $items['data/observations/qds'] = array(
    'title'             => 'Explore observations',
    'page callback'     => 'observations_qds_callback',
    // 'page arguments'    => array(),
    'access callback'   => TRUE,
    // 'access arguments'  => array('bulk upload media'),
    'delivery callback' => 'ajax_deliver',
    'type'              => MENU_CALLBACK, // MENU_CALLBACK,
  );

  return $items;
}


function explore_observations_map_callback() {
  add_ol_files();

  $url = 'data/observations/map';
  $content = '<div data-transform="to-map" data-source-url="' . $url . '"></div>';
  return $content;
}


function observations_qds_callback() {
  // dpm($_GET, '$_GET');

  $exposed_filters = $_POST;
  $response_info = [];

  // $params_json = file_get_contents("php://input");
  // // $params_json = file_get_contents("drupal://input"); // Use inputstream module.
  // // $params = json_server_parse_json($params_json); //json_decode($params_json, TRUE);
  // // dpm($params, '$params');
  // $response_info['params'] = $params_json;

  // $query_params = drupal_get_query_parameters();
  // dpm($query_params, 'query_params');
  // if ($query_params) {
  //   $param_string = '?';
  //   foreach ($query_params as $key => $param) {
  //     dpm($key . ': ' . $param);
  //   }
  // }

  $content = '';

  // $exposed_filters = [
  //   // 'name' => "Abrus", // Will only work when MTL field is populated
  //   'title' => "Abrus",
  // ];

  $locations = get_browse_observations_locations();
  // dpm($locations, '$locations');
  
  if (! $locations) {
    return '';
  }

  // Features that should be obscured because the author should not know where they are
  $features_sensitive = [];
  // Features that should be shown fully because the author is trusted
  $features_exact = [];
  global $user;
  foreach ($locations->features as $key => $value) {
    if ($value->properties->author_uid == $user->uid
      || user_has_role(3, $user)
      || user_has_role(5, $user)) {
      $features_exact[] = $value;
    }
    else {
      $features_sensitive[] = $value;
    }
  }
  // dpm(count($features_exact), 'count($features_exact)');
  // dpm(count($features_sensitive), 'count($features_sensitive)');

  // Convert points to QDS's, for all points
  $QDSs = convert_geojson_points_to_qdss((object) [
    'type' => 'FeatureCollection', 
    'features' => $features_sensitive,
  ]);
  // dpm($QDSs, '$QDSs');

  // Create a (rectangle) polygon feature for each QDS
  $qds_locations = convert_qdss_to_polygons($QDSs);
  // dpm($qds_locations, '$qds_locations');

  $features_combined = array_merge($features_exact, $qds_locations['features']);
  // dpm($features_combined, '$features_combined');

  // $locations_combined = [
  //   'type' => 'FeatureCollection', 
  //   'features' => $features_combined,
  // ];



  // $map_renderable = setup_QDS_map_container($locations, '');

  // $content['field_locations'] = array(
  //   'map' => $map_renderable,
  // );



  // // Convert points to QDS's, for all points
  // $QDSs = convert_geojson_points_to_qdss($locations);

  // // Create a (rectangle) polygon feature for each QDS
  // $qds_locations = convert_qdss_to_polygons($QDSs);
  // // dpm($qds_locations, '$qds_locations');



  $result['results_count'] = count($qds_locations['features']);
  $result['type'] = 'FeatureCollection';
  $result['features'] = $features_combined;
  // dpm($result, 'result');

  $response = array(
    '#type' => 'ajax', 
    '#commands' => $result,
  );
  // dpm($response, 'response');

  return $response;
}




/**
 * Gets the locations of all observations within a collection.
 *
 * @param $results_limit
 *   (optional) The maximum number of results to fetch. Defaults to 1000.
 *
 * @return
 *   An array of longitudes and latitudes.
 */
function get_browse_observations_locations($query_string = NULL) {
  // dpm($params, '$params');
  $view_name = 'browse_observations_map';
  $display_id = 'feed';

  // Get the view machine id.
  $view = views_get_view($view_name);
  // $view->set_display($display_id);

  // $filters = $view->display_handler->get_option('filters');
  // // dpm($filters, '$filters');
  // foreach ($exposed_filters as $key => $value) {
  //   $filters[$key]['value'] = $value;
  // }
  // // dpm($filters, '$filters');
  // $view->display_handler->set_option('filters', $filters);

  // // @todo Use these instead
  // $view->set_exposed_input($exposed_filters);

  // $view->pre_execute(); 
  // $view->execute();
  // // $geoJSON = $view->render();

  // dpm($view, '$view');
  // dpm(count($view->result), 'count($view->result)');

  // $view->post_execute(); 

  // Render.
  $geoJSON = $view->preview($display_id);
  $locations = json_decode($geoJSON);

  $results_count = count($locations->features);
  // dpm($results_count, '$results_count');
  $locations->count = $results_count;

  return $locations;
}



/**
 * Implements hook_init(). Primarily includes needed libraries and files.
 */
function casa_map_mgt_init() {

  if (is_page('observation_info')) {

    // Include required JavaScript files and libraries
    $js_files = array(
      drupal_get_path('module', 'casa_map_mgt') . '/scripts/widget_map.js',
    );

    foreach ($js_files as $path) {
      drupal_add_js($path);
    }

  }
}



/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Problem: Using exposed filters in a block on a page that isn't the view's page results in a page of AJAX code.
 * Cause: the exposed filters form's #action was pointing to that feed's url, not the current page.
 * This solution: Sets the exposed filters' form's action (url) to the current page.
 */
function casa_map_mgt_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');

  // @todo Add checks before simply altering the form!
  // The paths for which the files should be included
  $feed_paths = array(
    base_path() . 'browse/pictures/feed.geojson',
    base_path() . 'browse/observations/feed.geojson',
  );

  foreach ($feed_paths as $feed_path) {
    if (drupal_match_path($form['#action'], $feed_path)) {
      // Make it post to the current url by replacing the #action URL
      $form['#action'] = base_path() . 'browse/pictures/map';
    }
  }

  // dpm($form, 'form, after alter');
}



/**
 * Implements hook_openlayers_object_preprocess_alter(), which is an implementation of hook_TYPE_alter().
 */
function casa_map_mgt_openlayers_object_preprocess_alter(&$build, $context) {
  // dpm('reaches casa_map_mgt_openlayers_object_preprocess_alter');
  // dpm($build, 'build');
  // dpm($context, 'context');

  // Appends any current URL parameters to the OL source's URL
  // These parameters can then be used, for example, by Views as contextual filters.

  // Without this, OL maps using Views GeoJSON feeds as a source
  // don't respect exposed filters in a block (they don't affect the map)
  // if ($context->factory_service == 'openlayers.Source:GeoJSON') {
  if (get_class($context) == 'Drupal\openlayers\Plugin\Source\Vector\Vector') {
    // dpm($context, 'context');

    if (!isset($context->preprocess)) {
      $query_params = drupal_get_query_parameters();
      // dpm($query_params, 'query_params');

      if ($query_params) {
        $param_string = '?';
        foreach ($query_params as $key => $param) {
          // dpm($param);
          if ((!empty($param)) && ($param != 'All')) {
            $param_string .= urlencode($key) . '=' . urlencode($param) . "&";
          }
        }

        $new_url = $context->getOption('url') . $param_string;
        // dpm($new_url, 'new_url');
        // $context->setOption('url', $new_url);
      }

      $context->preprocess = TRUE; // Only process this once
    }
    // dpm($context->getOption('url'), 'url');
    // dpm($context, 'context, after');
  }
}



/**
 * Implements hook_form_FORM_ID_alter().
 */
function casa_map_mgt_form_node_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');

  $language = LANGUAGE_NONE; // 'und'
  if (isset($form['language'])) {
    $language = $form['language']['#value'];
  }

  if (isset($form['field_location'])) {
    // Re-order the Openlayers map widget's elements
    $form['field_location'][$language][0]['actionFeature']['#weight'] =   '1';
    $form['field_location'][$language][0]['dataType']['#weight'] =        '2';
    $form['field_location'][$language][0]['typeOfFeature']['#weight'] =   '3';
    $form['field_location'][$language][0]['clearmap']['#weight'] =        '4';
    $form['field_location'][$language][0]['map']['#weight'] =             '5'; // This was first

    // Change title from 'Type of interaction' to 'Action'
    $form['field_location'][$language][0]['actionFeature']['#title'] =    'Action';

    // Change title from 'Geometry type' to 'Type'
    $form['field_location'][$language][0]['typeOfFeature']['#title'] =    'Type';

    // Rename Type options
    // $form['field_location'][$language][0]['typeOfFeature']['#options']['Point'] =       'Point';
    $form['field_location'][$language][0]['typeOfFeature']['#options']['LineString'] =  'Path';
    $form['field_location'][$language][0]['typeOfFeature']['#options']['Polygon'] =     'Area';

  }

  // dpm($form, 'form');
}


/**
 * @param $locations
 *   An array in the format of an unencoded GeoJSON feature collection. The
 *   ‘features’ item must contain an array of point features, each of which
 *   must have a longitude and a latitude.
 * @param $eid
 *   The id of the entity that will be shown on the map.
 * @param $attributes
 *   (optional) An associative array of attributes that should be added to the map container element.
 */
function setup_QDS_map_container($locations, $eid, $attributes = []) {
  // dpm($locations, '$locations');
  // dpm($eid, '$eid');
  // dpm($attributes, '$attributes');

  // Convert points to QDS's, for all points
  $QDSs = convert_geojson_points_to_qdss($locations);

  // Create a (rectangle) polygon feature for each QDS
  $qds_locations = convert_qdss_to_polygons($QDSs);

  $map_attributes = array(
    'class="hidden ol-map field"',
    'data-transform="to-map"',
  );

  if (array_key_exists('gbif', $attributes)) {
    $map_attributes[] = 'data-gbif-key="' . $attributes['gbif']['key'] . '"';
  }
  // dpm($map_attributes, '$map_attributes');

  $locations_JSON = json_encode($qds_locations);
  // dpm($locations_JSON,'$locations_JSON');

  // Insert the location data into the term's content as hidden markup
  $map_renderable = array(
    '#type' => 'markup',
    '#markup' => '<p id="ol-map-' . $eid . '" ' . implode(' ', $map_attributes) . '>' . $locations_JSON . '</p>',
    '#weight' => '10',
  );
  // dpm($map_renderable, '$map_renderable');

  add_ol_files();

  return $map_renderable;
}



function add_ol_files($use_debug = FALSE) {
  // $lib_path = libraries_get_path('openlayers3');
  // Include the Openlayers JavaScript to render a map, and CSS to style it.
  // if ($use_debug) {
  //   $openlayers_js_path = $lib_path . '/build/ol-debug.js';
  //   drupal_add_js($openlayers_js_path, 'file');
  // }
  // else {
  //   $openlayers_js_path = $lib_path . '/build/ol.js';
  //   drupal_add_js($openlayers_js_path, 'file');
  // }
  // $openlayers_css_path = $lib_path . '/css/ol.css';
  // drupal_add_css($openlayers_css_path, 'file');

  $lib_path = libraries_get_path('openlayers');
  if ($use_debug) {
    $openlayers_js_path = $lib_path . '/ol-debug.js';
    drupal_add_js($openlayers_js_path, 'file');
  }
  else {
    $openlayers_js_path = $lib_path . '/ol.js';
    drupal_add_js($openlayers_js_path, 'file');
  }
  $openlayers_css_path = $lib_path . '/ol.css';
  drupal_add_css($openlayers_css_path, 'file');
}



/**
 * @param $locations_data
 *   An array in the format of an unencoded GeoJSON feature collection. The
 *   ‘features’ item must contain an array of point features, each of which
 *   must have a longitude and a latitude.
 *   Eg. {features => [geometry => {coordinates => [0, 0]},]}
 *
 * @return
 *   An array of strings in format: 'S17E019CD'.
 */
function convert_geojson_points_to_qdss($locations_data) {
  $QDSs = [];

  if (! isset($locations_data->features)) {
    throw new UnexpectedValueException("Parameter ‘locations_data’ is not valid.", 1);
  }

  foreach ($locations_data->features as $key => $feature) {
    $qds = determine_QDS(
      $feature->geometry->coordinates[0],
      $feature->geometry->coordinates[1]
    );
    // dpm($qds, 'QDS');

    if (isset($QDSs[$qds])) {
      $QDSs[$qds] ++;
    }
    else {
      $QDSs[$qds] = 1;
    }
  }
  // dpm($QDSs, 'QDSs');
  return $QDSs;
}



/**
 * @param $QDSs
 *   An array of strings in format: 'S17E019CD'.
 *
 * @return
 *   An array in the format of an unencoded GeoJSON feature collection. The
 *   ‘features’ item will contain an array of polygon features, each of which
 *   will have four points.
 */
function convert_qdss_to_polygons($QDSs) {
  $locations = array(
    'type' => 'FeatureCollection',
    'features' => [],
  );

  foreach ($QDSs as $QDS => $count) {
    $location = convert_qds_to_polygon($QDS);
    $location["properties"] = [
      "count" => $count,
      "name" => $QDS . ' (' . $count . ')',
    ];
    $locations['features'][] = $location;
  }
  // dpm($locations, 'locations');
  return $locations;
}



/**
 * @param $QDS
 *   An string in format: 'S17E019CD'.
 */
function convert_qds_to_polygon($QDS) {
  // dpm($QDS, 'QDS');
  $points = determine_points_from_QDS($QDS);
  // dpm($points, 'points');

  $location = [
    "type" => "Feature",
    "geometry" => [
      "type" => "Polygon",
      "coordinates" => [[
        [$points[0], $points[1]],
        [$points[2], $points[3]],
        [$points[4], $points[5]],
        [$points[6], $points[7]],
      ],
    ]],
  ];

  return $location;
}



/**
 * Determines the code of the QDS for a given point.
 *
 * See https://en.wikipedia.org/wiki/QDGC
 * or www.birding.co.za/challenge/standards.doc
 * or http://www.birding.co.za/challenge/grids.htm
 *
 * @return
 *   A string representing the QDS in format: 'S17E019CD'.
 */
function determine_QDS($lon, $lat) {
  // dpm($lon, 'lon');
  // dpm($lat, 'lat');

  // @todo Check lon is float between -180 and 180.
  if (!isset($lon) || $lon < -180 || $lon > 180) {
    throw new InvalidArgumentException("Longitude is not valid; " . $lon . " given.", 1);
  }
  // @todo Check lat is float between -90 and 90.
  if (!isset($lat) || $lat < -90 || $lat > 90) {
    throw new InvalidArgumentException("Latitude is not valid; " . $lat . " given.", 1);
  }

  $whole_x = floor($lon);      // eg. 1
  // dpm($whole_x, 'whole_x');
  $fraction_x = $lon - $whole_x; // eg. .25
  // dpm($fraction_x, 'fraction_x');

  $whole_y = floor($lat);      // eg. 1
  // dpm($whole_y, 'whole_y');
  $fraction_y = $lat - $whole_y; // eg. .25
  // dpm($fraction_y, 'fraction_y');

  // Format lon of '-5' as 'W005'.
  $lon_string = ($whole_x > 0) ?
    'E' . str_pad($whole_x, 3, "0", STR_PAD_LEFT) :
    'W' . str_pad(0 - $whole_x, 3, "0", STR_PAD_LEFT);
  // Format lat of '-5' as 'S05'.
  $lat_string = ($whole_y > 0) ?
    'N' . str_pad($whole_y, 2, "0", STR_PAD_LEFT) :
    'S' . str_pad(0 - $whole_y, 2, "0", STR_PAD_LEFT);

  // Determine the possible cells for the large square
  $l_x = ($fraction_x > 0 && $fraction_x < 0.5) ? ['A', 'C'] : ['B', 'D'];
  $l_y = ($fraction_y > 0 && $fraction_y < 0.5) ? ['A', 'B'] : ['C', 'D'];
  $intersection = array_intersect($l_x, $l_y);
  $large = reset($intersection);

  // To determine small square, fractions should be within first large square;
  // so take 0.5 off fractions larger than 0.5.
  $fraction_x_s = $fraction_x > 0.5 ? $fraction_x - 0.5 : $fraction_x;
  $fraction_y_s = $fraction_y > 0.5 ? $fraction_y - 0.5 : $fraction_y;

  // Determine the possible cells for the small square
  $s_x = ($fraction_x_s > 0 && $fraction_x_s < 0.25) ? ['A', 'C'] : ['B', 'D'];
  $s_y = ($fraction_y_s > 0 && $fraction_y_s < 0.25) ? ['A', 'B'] : ['C', 'D'];
  $intersection = array_intersect($s_x, $s_y);
  $small = reset($intersection);

  $qds = $lat_string . $lon_string . $large . $small;

  return $qds;
}



/**
 * Calculates the coordinates of the 4 points of the bounding box of a QDS.
 *
 * @param $qds
 *   A string representing the QDGS in format: 'S17E019CD'.
 *
 * @return
 *   An array of the four points of the QDS in the form '[0, 0, 0, 0, 0, 0, 0, 0]'.
 */
function determine_points_from_QDS($qds) {
  // dpm($qds, 'qds');

  $whole_x = floor(floatval(substr($qds, 4, 3)));
  $whole_x = substr($qds, 3, 1) == 'W' ? ($whole_x * -1) : $whole_x;
  // dpm($whole_x, 'whole_x');

  $whole_y = floor(floatval(substr($qds, 1, 2)));
  $whole_y = substr($qds, 0, 1) == 'S' ? ($whole_y * -1) : $whole_y;
  // dpm($whole_y, 'whole_y');

  // The two 'cell' identifiers
  $c1 = substr($qds, 7, 1); // Eg. 'C'
  $c2 = substr($qds, 8, 1); // Eg. 'D'
  // dpm($c1 . '; ' . $c2, 'c1; c2');

  // Determine the x and y values of the first point
  $point1_x = $whole_x
    + (($c1 == 'B' || $c1 == 'D') ? 0.50 : 0)
    + (($c2 == 'B' || $c2 == 'D') ? 0.25 : 0);

  $point1_y = $whole_y
    + (($c1 == 'C' || $c1 == 'D') ? 0.50 : 0)
    + (($c2 == 'C' || $c2 == 'D') ? 0.25 : 0);

  // In a clock-wise order: T-L, T-R, B-R, B-L.
  $points = array(
    $point1_x, $point1_y,
    $point1_x + 0.25, $point1_y,
    $point1_x + 0.25, $point1_y - 0.25,
    $point1_x, $point1_y - 0.25,
  );

  // dpm($points, 'points');
  return $points;
}



function convert_QDS_to_WKT($qds) {
  $points = determine_points_from_QDS($qds);
  return 'POLYGON (('
    . $points[0] . ' ' . $points[1] . ', '
    . $points[2] . ' ' . $points[3] . ', '
    . $points[4] . ' ' . $points[5] . ', '
    . $points[6] . ' ' . $points[7]
    . '))';
}



/**
 * @return
 *   An object in the format of an unencoded GeoJSON feature collection. The
 *   ‘features’ property contains an array of 1 point feature.
 */
function create_point_collection($lon, $lat) {
  $locations = (object) array(
    'type' => 'FeatureCollection',
    'features' => array(
      (object) array(
        'type' => 'Feature',
        'geometry' => (object) array(
          'type' => 'Point',
          'coordinates' => array(
            $lon,
            $lat,
          ),
        ),
      ),
    ),
  );
  return $locations;
}



/**
 * Implements hook_leaflet_map_info().
 *
 * Return a default map for the module.
 */
function casa_map_mgt_leaflet_map_info() {
  $thunderforest_key = '23a6fbc32de34edfb3403d65e0a5e45b';
  return array(
    'OSM Landscape' => array(
      'label' => 'OSM Landscape',
      'description' => t('Leaflet default map.'),
      // 'center' is used when map contains no features, or every time the map
      // is loaded if "force" is TRUE. Otherwise, the map will center itself
      // intelligently based on the features in the map.
      // RdB: bad things happen when 'center' is specified and Leaflet
      // MarkerCluster is used, see https://drupal.org/node/2144935
      // Also, a hard-coded center is not a great idea.
      //'center' => array(
      //  'lat' => 45.526513,
      //  'lon' => -122.674833,
      //  'force' => FALSE,
      //),
      'settings' => array(
        // Setting "zoom" forces a zoom level on every map load.
        //'zoom' => 17,
        // The "zoomDefault" is only used when no features are present.
        'zoomDefault' => 10,
        'minZoom' => 0,
        'maxZoom' => 18,
        'dragging' => TRUE,
        'touchZoom' => TRUE,
        'scrollWheelZoom' => TRUE,
        'doubleClickZoom' => TRUE,
        'zoomControl' => TRUE,
        'attributionControl' => TRUE,
        'trackResize' => TRUE,
        'fadeAnimation' => TRUE,
        'zoomAnimation' => TRUE,
        'closePopupOnClick' => TRUE,
        'layerControl' => TRUE,
      ),
      'layers' => array(
        'landscape' => array(
          'urlTemplate' => '//{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png?apikey=' . $thunderforest_key,
          'options' => array(
            'attribution' => 'OSM Landscape',
          ),
        ),
        'outdoors' => array(
          'urlTemplate' => '//{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey=' . $thunderforest_key,
          'options' => array(
            'attribution' => 'OSM Landscape',
          ),
        ),
      ),
    ),
  );
}


/**
 * Implements hook_views_pre_render()
 */
function casa_map_mgt_views_pre_render(&$view) {
  // dpm($view, '$view');

  // if ($view->base_table !== 'node') {
  //   return NULL;
  // }

  if ($view->name === 'browse_observations_map') {
    // obscure_sensitive_locations_views_pre_render($view);
  }
}

function obscure_sensitive_locations_views_pre_render(&$view) {
  // // $view->result = [$view->result[0]];

  // // unset($view->result[0]->field_field_location);

  // // $lat = -27.036145;
  // // $lon = 25.544269;

  foreach ($view->result as $key => $node) {
    if (! isset($node->field_field_location)) {
      continue;
    }
    $location = $node->field_field_location;
    $node->field_field_location_1[0]['rendered']['#markup'] = '10';
    $node->field_field_location_2[0]['rendered']['#markup'] = '10';
    $view->result[$key] = $node;
    // $view->field_field_location[0]['rendered']['#markup'] = 'Latitude: 0 <br/>Longitude: 0';

    // $view->result[$key]->field_field_location[0]['rendered']['#markup'] = 'test';
  }
  // dpm($view, '$view');
}