<?php
/**
 * @file
 * Bulk Media Upload Module
 */



/**
 * @todo Consoldate with the Group selected module…
 * especially creating identifications from filenames.
 */


/**
 * Implements hook_menu().
 */
function auto_group_nodes_menu() {

  $items['services/pictures/auto_group/%/%'] = array(
    'title'             => 'Upload Pictures',
    'page callback'     => 'auto_group_pictures_callback',
    'page arguments'    => array(3, 4),
    'access callback'   => TRUE,
    // 'access arguments'  => array('bulk upload media'),
    // 'file'              => 'casa_upload.upload.inc',
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  // dpm($items);
  return $items;
}


/**
 * Groups pictures into observations based on their date and time taken.
 *
 * This function can be modified to group the nodes based on other field data such as location…
 *
 * @param $collection
 *   The node id of the collection that the new observations should reference.
 */
function auto_group_pictures_callback($collection, $max_time_gap) {

  $response = auto_group_pictures($collection, $max_time_gap);

  $result = array('result' => 'success');
  $response = array('#type' => 'ajax', '#commands' => $result);
  // dpm($response, 'response');

  return $response;
}


/**
 * Groups pictures into observations based on their date and time taken.
 *
 * This function can be modified to group the nodes based on other field data such as location…
 *
 * @param $collection
 *   The node id of the collection that the new observations should reference.
 */
function auto_group_pictures($collection, $max_time_gap = 30) {
  // dpm($collection, 'collection');
  // dpm($max_time_gap, 'max_time_gap');

  // The maximum amount of time 2 consecutive pictures can be separated by within a single observation
  global $user;
  $grouping_type = 'observation';

  // Deletes all groups from this collection. In Group Selected module.
  delete_referring_nodes($grouping_type, $collection);

  $nodes = create_pictures_array($collection);
  // dpm($nodes, '$nodes in created pictures array');

  // if (!$nodes) {
  //   throw new Exception("There are no nodes to group", 1);
  // }

  if (!isset($collection)) {
    $collection = '';
  }

  ksort($nodes); // Sort by key (date taken field)
  // dpm($nodes, 'nodes');

  $previous_timestamp =   0;
  $current_observation =  NULL;
  $current_nids =         array();
  $observations =         array();

  foreach ($nodes as $node) {
    $timestamp = $node->field_date_taken->value();
    // dpm($timestamp, 'timestamp');

    $time_gap = ($timestamp - $previous_timestamp);
    // dpm($time_gap, 'time_gap');

    $start_of_new_group = $time_gap > $max_time_gap;
    // $start_of_new_group = TRUE; // <================================== DEV only!
    if ($start_of_new_group) {

      // If this is not the first node
      if ($current_nids && $current_observation) {
        // Save previous group of pictures to the current observation
        // dpm($current_nids, 'current_nids');

        set_observation_fields($current_observation, $current_nids, $collection);

        $current_nids = array();
        $observations[] = $current_observation;
      }

      // Create an observation for the new group

        $observation_raw = entity_create('node', array(
          'type' =>     'observation',
          'title' =>    '',
          'uid' =>      $user->uid,
          'status' =>   1,
        ));
        // dpm($observation_raw, 'observation_raw');

        $current_observation = entity_metadata_wrapper('node', $observation_raw);

        // dpm($current_observation->field_collection->value(), 'observations’s collection val');
      //

    }
    $current_nids[] = $node->nid->value();
    $previous_timestamp = $timestamp;
  }

  // Also, add the last group of pictures to the previous observation.
  if ($current_nids) {
    // Save previous group of nodes to this new group
    // dpm($current_nids, 'current_nids');

    set_observation_fields($current_observation, $current_nids, $collection);
    // dpm($current_observation, 'current_observation');

    $current_nids = array();
    $observations[] = $current_observation;
  }
  // dpm($observations, 'observations');

  // $commands[] = ajax_command_replace('#MYMODULE-wrapper', 'Hey ! Some AJAX content !');
  drupal_set_message(count($nodes) . ' pictures were auto-grouped for you.', 'status');

  return $response;
}



/**
 * Create an array of wrapped picture nodes keyed by their timestamps (date taken field).
 */
function create_pictures_array($collection_nid) {
  // dpm($collection_nid, '$collection_nid');
  
  if (! is_valid_eid($collection_nid)) {
    throw new InvalidArgumentException("Parameter $collection_nid, " . $collection_nid . ", needs to be a valid NID.", 1);
  }

  $nids = array();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'picture')
    ->fieldCondition('field_collection', 'target_id', $collection_nid, '=')
    ->fieldOrderBy('field_date_taken', 'value', 'ASC')
    // ->addMetaData('account', user_load(1)) // Run the query as user 1.
  ;
  // dpm($query, '$query');

  $result = $query->execute();
  // dpm($nids, 'nids queried');

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
  }
  else {
    return $nids;
  }

  $nodes_raw = node_load_multiple($nids);
  // dpm($nodes_raw, 'nodes_raw');
  $nodes = array();

  foreach ($nodes_raw as $node_raw) {
    $node = entity_metadata_wrapper('node', $node_raw);
    $nodes[] = $node;
  }

  return $nodes;
}
