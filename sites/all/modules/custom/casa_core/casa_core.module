<?php
/**
 * @file
 * Functions that other custom CasaBio modules depend on.
 */

/**
 * @mainpage
 * @link /api/casa_documentation CasaBio @endlink CasaCore module.
 */

use Drupal\Casabio\casa_core;

/**
 * CONTENTS
 *
 * casa_core_init()
 * casa_core_menu()
 *
 * home_page_callback()
 * signup_login_section()
 * latest_section()
 * latest_page_callback()
 *
 * casa_core_user_login()
 * casa_core_form_user_register_form_alter()
 * casa_core_form_user_profile_form_alter()
 * casa_core_admin_paths_alter()
 * casa_core_js_alter()
 * deliver_raw_html()
 * calculate_users_reliability()
 * calculate_user_reliability()
 * casa_core_views_ajax_data_alter()
 * user_has_min_role()
 * user_tooltip_callback()
 * demos_teasers_page_callback()
 * demos_evm_page_callback()
 * once_record_observations_localities_to_taxa()
 */

module_load_include('inc', 'casa_core', 'other_queries');
module_load_include('inc', 'casa_core', 'historian');
module_load_include('inc', 'casa_core', 'achievements');
module_load_include('inc', 'casa_core', 'herbarium_labels');



/**
 * Implements hook_init().
 */
function casa_core_init() {
  // dpm('Call: casa_core_init');

  // Add core JS libraries
  drupal_add_library('system', 'ui.dialog', TRUE);
  drupal_add_library('system', 'ui.tooltip', TRUE);

  // Add other libraries
  libraries_load('toastr');
  libraries_load('lightbox');

  // Check that the libraries have been loaded
  if (!(($library = libraries_load('toastr')) && !empty($library['loaded']))) {
    drupal_set_message(t('Library ‘Toastr’ not loaded.'), 'error', FALSE);
  }

  // Load footer js files
  $js_files_footer = libraries_get_path('lightbox') . '/dist/js/lightbox.js';
  drupal_add_js($js_files_footer, array('scope' => 'footer'));

  // Add JS settings
  drupal_add_js(array(
    'API_path' => 'services',
    // add $settings['user']['is_logged_in'] = true; for logged-in users
    'user' => array('is_logged_in' => user_is_logged_in()),
  ), 'setting');

  drupal_add_js(array('current_path' => current_path()), 'setting');

  // // Include required JavaScript files and libraries
  // $js_files = array(
  //   drupal_get_path('module', 'edit_selected') . '/scripts/es_api_interactions.js',
  // );
  // foreach ($js_files as $path) {
  //   drupal_add_js($path);
  // }

  // lookup_iucn('');
  // calculate_users_reliability();

  // once_record_observations_localities_to_taxa();

  // save_etymologies_to_similar_taxa();
}



/**
 * Implements hook_init().
 */
function get_site_setting($setting) {
  // dpm($setting, '$setting');
  $site_settings_file = 'site_settings.json';
  $file_url = drupal_get_path('module', 'casa_core') . '/' . $site_settings_file;
  // dpm($file_url, '$file_url');
  // $site_settings = yaml_parse_file($file_url);
  $site_settings = json_decode(file_get_contents($file_url));
  // dpm($site_settings, '$site_settings');
  if (property_exists($site_settings, $setting)) {
    return $site_settings->{$setting};
  }
  else {
    throw new Exception("'" . $setting . "'' is not a site setting", 1);
  }
}





/**
 * Implements hook_menu().
 */
function casa_core_menu() {
  $items['home'] = array(
    // 'title' => 'Home', // This page shouldn't display a title.
    'page callback'     => 'home_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['latest'] = array(
    'title'             => 'Latest',
    'page callback'     => 'latest_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
    'menu_name'         => 'main-menu',
  );

  $items['my/contributions'] = array(
    'title'             => 'Contributions',
    'page callback'     => 'my_contributions_goto_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
    'menu_name'         => 'menu-my',
  );

  $items['user/%/contributions'] = array(
    'title'             => 'Contributions',
    'page callback'     => 'my_contributions_page_callback',
    'page arguments'    => array(1),
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['my/herbarium_labels/%'] = array(
    'title'             => 'Herbarium Labels',
    'page callback'     => 'herbarium_labels_callback',
    'page arguments'    => array(2),
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['my/herbarium_labels/%/printable'] = array(
    'title'             => 'Herbarium Labels Printable',
    'page callback'     => 'herbarium_labels_printable_callback',
    'page arguments'    => array(2),
    'access callback'   => TRUE,
    'delivery callback' => 'deliver_raw_html',
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['user/tooltip/%'] = array(
    'title'             => 'User tooltip',
    'page callback'     => 'user_tooltip_callback',
    'page arguments'    => array(2),
    'access callback'   => TRUE,
    'delivery callback' => 'deliver_raw_html',
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['demos/teasers'] = array(
    'title'             => 'Teaser Demonstrations',
    'page callback'     => 'demos_teasers_page_callback',
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['demos/entity_view_modes/%/%'] = array(
    'title'             => 'Entity View Modes Demonstrations',
    'page callback'     => 'demos_evm_page_callback',
    'page arguments'    => array(2, 3),
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  $items['ml-data/images/%/%'] = array(
    'title'             => 'ML Data Images',
    'page callback'     => 'ml_data_images_callback',
    'page arguments'    => array(2, 3),
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  $items['admin/config/system/site-settings'] = array(
    'title'               => 'Site settings',
    'description'         => 'Configuration for entire CasaBio site',
    'page callback'       => 'drupal_get_form',
    'page arguments'      => array('site_settings_form'),
    'access arguments'    => array('access administration pages'),
    // 'menu_name'           => 'main-menu',
    'type'                => MENU_NORMAL_ITEM,
  );

  $items['test'] = array(
    'title'             => 'Test Page',
    'page callback'     => 'test_page_callback',
    // 'page arguments'    => array(),
    'access callback'   => TRUE,
    'type'              => MENU_NORMAL_ITEM,
  );

  return $items;
}



/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function site_settings_form($form, &$form_state) {

  $form['skip_save_callbacks'] = array(
    '#type'               => 'checkbox',
    '#title'              => 'Skip save callbacks?',
    '#description'        => 'Whether to skip the functions that run automatically each time some content is saved.',
    '#default_value'      => variable_get('skip_save_callbacks'),
  );

  return system_settings_form($form);
}



function herbarium_labels_callback($collection_nid = '') {
  return casa_core\_herbarium_labels_callback($collection_nid);
}

function herbarium_labels_printable_callback($collection_nid = '') {
  return casa_core\_herbarium_labels_printable_callback($collection_nid);
}



/**
 *
 */
function home_page_callback() {
  $content = array();

  $content['signup_login_section'] = signup_login_section();

  $file_url = drupal_get_path('module', 'casa_core') . '/markup/home-how.html';
  $content['how'] = array(
    '#markup' => file_get_contents($file_url),
  );

  $content['latest'] = latest_section();

  $file_url = drupal_get_path('module', 'casa_core') . '/markup/home-support.html';
  $content['support'] = array(
    '#markup' => file_get_contents($file_url),
  );

  return $content;
}


function signup_login_section() {

  $aside = array(
    '#prefix' => '<aside class="tabs">',
    '#suffix' => '</aside>',
    '#tree' => TRUE,
  );

  if (! user_is_logged_in()) {
    $aside['heading'] = array(
      '#markup' => '<h3>Sign up to contribute photos and information!</h3>',
      '#weight' => 1,
    );
    $aside['tablist'] = array(
      '#markup' => '<div role="tablist">'
        . '<button role="tab" data-name="login" aria-selected>Log in</button>'
        . '<button role="tab" data-name="signup">Sign up</button>'
        . '</div>',
      '#weight' => 2,
    );

    $aside['tabpanel-1'] = array(
      '#prefix' => '<div role="tabpanel" data-name="login" aria-selected>',
      '#suffix' => '</div>',
      '#tree' => TRUE,
      '#weight' => 3,
    );
    $aside['tabpanel-2'] = array(
      '#prefix' => '<div role="tabpanel" data-name="signup">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
      '#weight' => 4,
    );

    $aside['tabpanel-1']['login'] = drupal_get_form('user_login');
    $aside['tabpanel-2']['register'] = drupal_get_form('user_register_form');
  }
  else {
    global $user;
    // dpm($user, '$user');
    $aside['heading'] = array(
      '#markup' => '<h3>Welcome back ' . $user->name . '</h3>',
      '#weight' => 1,);
  }


  $image_url = drupal_get_path('module', 'casa_core')
    . '/images/bird-by-vincent-van-zalinge-scaled.jpeg';

  $content = array();
  $content['signup_login'] = array(
    '#prefix' => '<section id="signup_login" '
      . 'style="background-image: url(' . $image_url . ')">',
    '#suffix' => '</section>',
    '#tree' => TRUE,
  );
  $content['signup_login']['tabs'] = $aside;

  // dpm($content, '$content');
  return $content;
}


function latest_section() {
  $content = array();

  $file_url = drupal_get_path('module', 'casa_core') . '/markup/home-latest.html';
  $content['latest'] = array(
    '#markup' => file_get_contents($file_url),
  );

  return $content;
}



function latest_page_callback() {
  $content = array(
    'latest_unidentified_observations' => array(
      '#markup' => '<h2>Unidentified Observations</h2>'
        . views_embed_view(
          'latest_unidentified_observations',
          'default'),
    ),
    'latest_identified_observations' => array(
      '#markup' => '<h2>Identified Observations</h2>'
        . views_embed_view(
          'latest_identified_observations',
          'default'),
    ),
    'latest_collections' => array(
      '#markup' => '<h2>Collections</h2>'
        . views_embed_view(
          'latest_collections',
          'default'),
    ),
    'new_contrib_ways' => array(
      '#markup' => '<h2>Ways To Contribute</h2>'
        . '<ul class="non-list cols-4">'
        . '  <li><a class="pane" href="' . base_path() . 'contribute/upload">Contribute observations</a></li>'
        . '  <li><span class="pane">Identify new observations</span></li>'
        . '  <li><span class="pane">Add species interactions</span></li>'
        // . '  <li><span class="pane">(Maintainers) Patrol recent contributions</span></li>'
        // . '</ul>'
      ,
    ),
  );

  global $user;
  if (user_access('can maintain content')) {
    $content['new_contrib_ways']['#markup'] .= 
      '  <li><span class="pane">Patrol recent contributions (<em>Maintainers</em>)</span></li>';
  }
  $content['new_contrib_ways']['#markup'] .= '</ul>';

  return $content;
}



function my_contributions_goto_page_callback() {
  global $user;
  drupal_goto('user/' . $user->uid . '/contributions');
}
function my_contributions_page_callback($uid) {
  $user = user_load($uid);
  return '<h1>' . $user->name . '’s Contributions</h1>';
}



function contribute_request_page_callback() {
  return '';
}



/**
 * Implements hook_user_login().
 */
function casa_core_user_login(&$edit, $account) {
  // dpm($edit, '$edit');
  // dpm($account, '$account');

  // Make sure the password reset functionality is not impaired.
  if (isset($_POST['form_id'])) {
    if ($_POST['form_id'] === 'user_pass_reset') {
      return NULL;
    }
  }

  $is_first_login = $account->access == 0;
  drupal_add_js(['isFirstLogin' => $is_first_login], 'setting');

  if ($is_first_login) {
    drupal_set_message(t("Welcome to CasaBio! This is your personal home page."), 'status', FALSE);
  }
  else {
    drupal_set_message(t("Welcome back."), 'status', FALSE);
  }
}



/**
 * Implements hook_form_alter().
 */
function casa_core_form_alter(&$form, &$form_state, $form_id) {}



/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function casa_core_form_user_login_alter(&$form, &$form_state, $form_id) {
  // dpm($form, '$form');
  $form['#submit'][] = 'casa_user_login_submit';
}
function casa_user_login_submit() {
  $form_state['redirect'] = 'latest';
}




/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function casa_core_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');

  // Move the 'account' fields (username and email address) out of their fieldset.
  unset($form['#group_children']['account']);

  $form['field_bio']['#access'] = FALSE;
  $form['field_history']['#access'] = FALSE;
  $form['mollom']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;
  $form['overlay_control']['#access'] = FALSE;
  $form['contact']['#access'] = FALSE;
  $form['wysiwyg']['#access'] = FALSE;
}



/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 * Form used to edit *existing* users, not create new users.
 */
function casa_core_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');

  global $user; // The current user, not the user being edited.
  $is_admin = in_array('Administrator', $user->roles);
  // dpm($is_admin, '$is_admin');
  
  $form['field_history']['#access'] = FALSE;

  if (! $is_admin) {
    $form['field_reliability']['#access'] = FALSE;
  }
}



/**
 * Implements hook_admin_paths_alter().
 */
function casa_core_admin_paths_alter(&$paths) {
  //return FALSE to the path where you don't want to show in OVERLAY
  $paths['node/add/identification'] = FALSE;
}



/**
 * Implements hook_js_alter().
 */
function casa_core_js_alter(&$javascript) {
  // dpm($javascript, 'javascript');

  // Move all custom module JS files between 'JS_DEFAULT' and 'JS_THEME' groups.
  foreach ($javascript as $file => $parameters) {
    // dpm(substr($file, 0, 24), 'substr');
    if(substr($file, 0, 24) == 'sites/all/modules/custom') {
      $javascript[$file]['group'] = 50;
    }
  }
  // dpm($javascript, 'javascript');
}





/**
 * Packages and sends the result of a page callback to the browser as HTML.
 *
 * This is a Custom implimentation of drupal_deliver_html_page(), but specifically for AJAX use.
 */
function deliver_raw_html($page_callback_result) {
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  if (isset($page_callback_result)) {
    print render($page_callback_result);
  }
  else {
    watchdog('Error in deliver_raw_html()', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
    throw new Exception("Something went wrong retriving the markup", 1);
  }
}



// function casa_core_theme($existing, $type, $theme, $path) {
//   return array(
//     'selectable' => array(
//       // 'variables' => array(),
//     ),
//   );
// }




function calculate_users_reliability() {
  // return NULL;

  global $user;
  // dpm($user, '$user');

  $users = get_users();
  // dpm($users, '$users');

  foreach ($users as $uid => $user_representation) {
    $user = user_load($uid);
    if ($user) {
      // dpm($uid, '$uid');
      calculate_user_reliability($user, '$user');
    }
  }
}




function calculate_user_reliability($user) {
  // dpm($user, '$user');

  // Get identifications and community identifications

  // Fetch user's 40 most recent identifications
  $identifications_basic = get_identifications_by_user($user->uid, 40);
  // dpm($identifications_basic, '$identifications_basic');

  // return null;
  if (! $identifications_basic) {
    return null;
  }

  $identifications_nids = array_keys($identifications_basic);
  // dpm($identifications_nids, '$identifications_nids');

  // Get the community identification for each identification

  $comm_ids_nids = [];
  foreach ($identifications_nids as $nid) {
    $comm_id_basic = get_comm_id_refing_identification($nid);
    // dpm($comm_id_basic, '$comm_id_basic');
    if ($comm_id_basic) {
      $comm_ids_nids[] = $comm_id_basic->nid;
    }
    else {
      // This identification doesn't have a comm_id for some reason
      $comm_ids_nids[] = NULL;
    }
  }
  // dpm($comm_ids_nids, '$comm_ids_nids');

  // Calculate difference score for each identification

  $scores = [];
  foreach ($identifications_nids as $key => $identifications_nid) {
    // If this identification doesn't have a comm_id
    if (! $comm_ids_nids[$key]) {
      continue;
    }

    $identification = entity_metadata_wrapper('node', $identifications_nid);
    // dpm($identification->raw(), '$identification');

    $comm_id = entity_metadata_wrapper('node', $comm_ids_nids[$key]);
    // dpm($comm_id->raw(), '$comm_id');

    // Ensure that the comm_id has at least 1 other user's identification.

    $identifications_count = $comm_id->field_identifications->count();
    // dpm($identifications_count, '$identifications_count');
    if ($identifications_count <= 1) {
      continue;
    }

    // Compare certainty with reliability to calculate score

    $certainty = $identification->field_certainty->value() * 10; // User
    // dpm($certainty, '$certainty');
    $reliability = $comm_id->field_reliability->value(); // Community
    // dpm($reliability, '$reliability');

    // If either the certainty or reliability score is zero
    if (! ($certainty && $reliability)) {
      continue;
    }

    $scores[$key] = ($certainty - $reliability);
    $scores[$key] = $scores[$key] < 0 ? -1 * $scores[$key] : $scores[$key]; // Make it positive
  }
  // dpm($scores, '$scores');

  // 100- because the scores indicate how far off each certainty is on average
  $user_reliability = 100 - (array_sum($scores) / count($scores));
  // dpm($user_reliability, '$user_reliability');

  $user_loaded = entity_metadata_wrapper('user', $user->uid);
  // dpm($user_loaded->raw(), '$user_loaded');
  // $user_loaded->field_reliability->set($user_reliability);
  // $user_loaded->save();

  // return $user_reliability;
}


/**
 * Implements hook_views_ajax_data_alter().
 * Allows altering of commands sent in reponse to a views ajax request.
 */
function casa_core_views_ajax_data_alter(&$commands, $view) {
  // dpm($commands, '$commands');
  // dpm($view, '$view');
  if ($view->name == 'species_reference_selector_widget') {

    // View used to by 'Identify observation'
    // Remove the view's actions (like the Save button)
    // Because JavaScript takes care of saving separately from the view.

    foreach ($commands as $index => $command) {
      if ($command['command'] === 'insert') {
        $commands[$index]['data'] = str_replace(
          'form-actions', 'form-actions hidden', $commands[$index]['data']);
      }
    }
  }
}



function user_has_min_role($user, $role_name) {
  switch ($role_name) {
    case 'Maintainer':
      return in_array('Maintainer', $user->roles)
        || in_array('Super maintainer', $user->roles)
        || in_array('Administrator', $user->roles);
      break;
    
    default:
      return TRUE;
      break;
  }
}



function user_tooltip_callback($username = '') {
  if (! $username) {
    return NULL;
  }

  $user_renderable = user_view(user_load_by_name($username), 'full');

  return $user_renderable;
}



function demos_teasers_page_callback() {

  $content = array(
    'teasers' => array(/*'#markup' => array()*/),
  );

  $entities_info = entity_get_info();
  // dpm($entities_info, '$entities_info');

  // Or hard-code the ones we want to show
  $entities_info = array(
    'node' => array(
      'bundles' => array(
        'collection' => [],
        'identification_community' => [],
        'habitat_record' => [],
        'interaction' => [],
        'observation' => [],
        'picture' => [],
      ),
    ),
    'taxonomy_term' => array(
      'bundles' => array(
        'taxa' => [],
        'habitats' => [],
        'locality' => [],
      ),
    ),
  );

  foreach ($entities_info as $entity_type => $entity_type_info) {

    if ($entity_type !== 'node' && $entity_type !== 'taxonomy_term') {
      continue;
    }

    foreach ($entity_type_info['bundles'] as $bundle => $bundle_info) {

      $type_name = $entity_type . '-' . $bundle;

      $content['teasers'][$type_name] = array(
        array('#markup' => '<div class="heading">' . $bundle . '</div>'),
      );

      // Get one node / entity using EntityFieldQuery

      $result = get_one_entity($entity_type, $bundle);
      // dpm($result, '$result');

      // If one was found
      if (! $result) {
        continue;
      }

      // Add the rendered node / entity to the output
      if ($entity_type === 'node') {
        $eid = $result->nid;
        $content['teasers'][$type_name][] = node_view((node_load($eid)), 'teaser');
      }
      elseif ($entity_type === 'taxonomy_term') {
        $eid = $result->tid;
        $term = (taxonomy_term_load($eid));
        $content['teasers'][$type_name][] = taxonomy_term_view($term, 'teaser');
      }

    }
  }

  // dpm($content, '$content');
  return $content;
}



function demos_evm_page_callback($entity_type, $bundle) {

  $content = array(
    'view_modes' => array(/*'#markup' => array()*/),
  );

  $view_modes = field_view_mode_settings($entity_type, $bundle);
  // dpm($view_modes, '$view_modes');

  foreach (array_keys($view_modes) as $view_mode) {
    if (! $view_modes[$view_mode]['custom_settings']) {
      unset($view_modes[$view_mode]);
    }
  }
  // dpm($view_modes, '$view_modes');

  foreach (array_keys($view_modes) as $view_mode) {
    // dpm($view_mode, '$view_mode');

    if ($entity_type !== 'node' && $entity_type !== 'taxonomy_term') {
      continue;
    }

    $content['view_modes'][$view_mode] = array(
      array('#markup' => '<div class="heading">' . $view_mode . '</div>'),
    );

    // Get one node / entity using EntityFieldQuery

    $result = get_one_entity('node', $bundle);
    // dpm($result, '$result');

    // If one was found
    if (! $result) {
      continue;
    }

    // Add the rendered node / entity to the output
    if ($entity_type === 'node') {
      $eid = $result->nid;
      $content['view_modes'][$view_mode][] = node_view((node_load($eid)), $view_mode);
    }
    elseif ($entity_type === 'taxonomy_term') {
      $eid = $result->tid;
      $term = taxonomy_term_load($eid);
      $content['view_modes'][$view_mode][] = taxonomy_term_view($term, $view_mode);
    }
  }

  // dpm($content, '$content');
  return $content;
}



function once_record_observations_localities_to_taxa() {
  // Fetch all observations with a locality
  $observations = get_observations_with_localities(5);
  // dpm($observations, '$observations');
  // return null;

  $count_observations_altered = 0;
  $count_observations_alter_failures = 0;

  foreach ($observations as $nid => $observation_representation) {
    $is_success = record_observation_localities_to_taxa($nid);
    if ($is_success) {
      $count_observations_altered++;
    }
    else {
      $count_observations_alter_failures++;
    }
  }
  drupal_set_message(t($count_observations_altered . ' observations altered.'), 'status', FALSE);
  if ($count_observations_alter_failures) {
    drupal_set_message(t($count_observations_alter_failures . ' observations not altered.'), 'error', FALSE);
  }
}


/**
 * Determines if a given entity id is a valid integer.
 *
 * @param $eid
 *   The entity ID to test.
 *
 * @return
 *   TRUE if a valid entity ID, FALSE otherwise.
 */
function is_valid_eid($eid) {
  // Test if it is numeric
  if (! is_numeric($eid)) {
    return FALSE;
  }

  // Test if it is an integer and greater than 0
  if (! intval($eid) > 0 ) {
    return FALSE;
  }

  return TRUE;
}


/**
 * Determines if a given entity is a valid Drupal entity object.
 *
 * @param string $entity_type
 *   The type of entity to test for.
 * @param $entity
 *   The entity to test. Should be an object (stdClass) as created by entity_create().
 *
 * @return
 *   TRUE if a valid Drupal entity, FALSE otherwise.
 */
function is_valid_entity(string $entity_type, $entity) {

  // Test if 
  if (! gettype($entity) === 'object') {
    return FALSE;
  }

  // TYPES (in Drupal 7 core)
  // 1. Nodes (content)
  // 2. Comments
  // 3. Files
  // 4. Taxonomy terms
  // 5. Taxonomy vocabularies
  // 6. Users

  switch ($entity_type) {
    case 'node':
      if (! (
        property_exists($entity, 'nid') && 
        property_exists($entity, 'title') && 
        property_exists($entity, 'type'))) {
        return FALSE;
      }
      break;

    case 'taxonomy_term':
      if (! (
        property_exists($entity, 'tid') && 
        property_exists($entity, 'name'))) {
        return FALSE;
      }
      break;

    case 'user':
      if (! (
        property_exists($entity, 'uid') && 
        property_exists($entity, 'name'))) {
        return FALSE;
      }
      break;
    
    default:
      throw new Exception("Entity type not recognised", 1);
      break;
  }

  return TRUE;
}



/**
 * Implements hook_block_info().
 */
function casa_core_block_info() {
  $blocks = array();

  $blocks['site_stats'] = array(
    'info' => t('Site stats'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    // 'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['user_stats'] = array(
    'info' => t('User stats'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    // 'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}



/**
 * Implements hook_block_view().
 */
function casa_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'site_stats':
      $block['subject'] = t('Site Stats');
      $block['content'] = casa_core\site_stats_block_view();
      break;

    case 'user_stats':
      $block['subject'] = t('User Stats');
      $block['content'] = casa_core\user_stats_block_view();
      break;
  }

  return $block;
}


function casa_core_cron() {
  // batch_update_taxa();
}


/**
 * Calculates how long something has taken.
 * 
 * @param float $start
 *   Unix timestamp when period began in microseconds.
 *   
 */
function calc_duration($start, $name) {
  $end = microtime(TRUE);
  $duration = round(($end - $start), 2);
  // watchdog('duration', $name . ': ' . $duration);
  return $duration;
}



function test_page_callback() {
  // return import_synonyms('synonyms.csv');
  setup_batches();
  return '';
}

function setup_batches() {
  $file_url = drupal_get_path('module', 'casa_core') . '/synonyms.csv';
  $file_data = explode(PHP_EOL, file_get_contents($file_url));
  // dpm($file_data, '$file_data');

  $batch = array(
    'title' => t('Importing synonyms'),
    'operations' => [
      [
        'import_synonyms',
        [$file_data,],
      ],
    ],
    'finished' => 'import_synonyms_finished',
    'file' => drupal_get_path('module', 'casa_core') . '/includes/batch_processes.inc',
  );
  batch_set($batch);
  // dpm(batch_get(), 'batch_get()');

  // Only needed if not inside a form _submit handler.
  // Setting redirect in batch_process.
  batch_process('');
}

// function import_synonyms($filename) {
//   $file_url = drupal_get_path('module', 'casa_core') . '/' . $filename;
//   $file_data = explode(PHP_EOL, file_get_contents($file_url));
//   // dpm($file_data, '$file_data');
//   dpm("Total: " . (count($file_data) - 2));
//   $processed = 0; //

//   foreach ($file_data as $index => $line) {
//     if ($index == 0)
//       continue;
//     $data = explode('|', $line);
//     // dpm($data, '$data');
//     if (count($data) < 6)
//       continue;
    
//     // Assumes that all text fields are enclosed in ""
//     $taxon_name = substr($data[3], 1, -1);
//     // $taxon_name = 'Viridiplantae';
//     // dpm($taxon_name, '$taxon_name');
//     $taxon_reps = get_taxa_with_sci_name($taxon_name, 'is', $results_limit = 10);
//     // dpm($taxon_reps, '$taxon_reps');
//     if (! $taxon_reps) {
//       dpm('Taxon "' . $taxon_name . '" not found');
//       continue;
//     }
//     $taxon = entity_metadata_wrapper('taxonomy_term', array_keys($taxon_reps)[0]);
//     // dpm($taxon->raw(), '$taxon->raw()');
    
//     // Assumes that all text fields are enclosed in ""
//     $synonym_name = substr($data[1], 1, -1);
//     // $synonym_name = 'Viridiplantae';
//     // dpm($synonym_name, '$synonym_name');
//     $synonym_reps = get_taxa_with_sci_name($synonym_name, 'is', $results_limit = 10);
//     // dpm($synonym_reps, '$synonym_reps');
//     if ($synonym_reps) {
//       $synonym_tid = array_keys($synonym_reps)[0];
//       // dpm($synonym_tid, '$synonym_tid');
//       $taxon->field_synonym_of->set([$synonym_tid]);
//     }
//     else {
//       dpm('Synonym "' . $synonym_name . '" not found');
//     }

//     $field_synonym_status = $data[6];
//     // dpm($field_synonym_status, '$field_synonym_status');
//     if ($field_synonym_status) {
//       $taxon->field_synonym_status->set($field_synonym_status);
//     }

//     // dpm($taxon->raw(), '$taxon->raw()');
//     $processed++;
//     $taxon->save();
//   }
//   dpm("Updated: " . $processed);

//   return '';
// }


/**
 * @deprecated
 */
function count_user_first_identifications($uid) {
  $first_identis_count = 0;
  $identifications = get_nodes_by_user($uid, 'identification', NULL, 10000);
  // dpm($identifications, '$identifications');
  foreach (array_keys($identifications) as $nid) {
    $identi = entity_metadata_wrapper('node', $nid);
    $term = $identi->field_identified_species->value();
    // dpm($term, '$term');
    if (! $term) {
      continue;
    }
    $first_identi = get_first_identifications_of_taxon($term->tid, 1);
    // dpm($first_identi, '$first_identi');
    if ($first_identi) {
      $first_identis_count ++;
    }
  }
  return $first_identis_count;
}



/**
 * Implements hook_ranking().
 */
// function casa_core_ranking() {
// }


function save_etymologies_to_similar_taxa() {
  $taxa = get_taxa(1, ['field_etymology']);
  // dpm($taxa, '$taxa');

  foreach ($taxa as $tid => $taxon_rep) {
    $term = entity_metadata_wrapper('taxonomy_term', $tid);
    $rank = $term->field_taxon_rank->value();
    // dpm($rank, '$rank');
    $name_parts = explode(' ', $term->label());

    $name_to_search = (strtolower($rank) == 'species') ?
      end($name_parts) :
      $term->label();
    // dpm($name_to_search, '$name_to_search');
    // $name_to_search = 'capensis'; // For dev

    $similar_taxa = get_taxa_with_name($name_to_search, 'contains', $rank, NULL, ['field_etymology']);
    // dpm($similar_taxa, '$similar_taxa');

    foreach ($similar_taxa as $s_tid => $s_taxon_rep) {
      // $similar_term = taxonomy_term_load($tid);
      $similar_term_w = entity_metadata_wrapper('taxonomy_term', $tid);
      // dpm($similar_term_w->raw(), '$similar_term_w');
    }
  }
}



function taxonomy_get_children_all($tid, $vid = 0, $key = 'tid') {
  $result = [];
  $children = taxonomy_get_children($tid, $vid, $key);
  foreach ($children as $tid => $term) {
    $result[$tid] = $term;
    $below = taxonomy_get_children_all($tid, $vid, $key);
    if (!empty($below)) {
      foreach ($below as $below_tid => $below_term) {
        $result[$below_tid] = $below_term;
      }
    }
  }
  return $result;
}
