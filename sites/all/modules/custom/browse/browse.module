<?php
/**
 * @file
 * Functionality allowing the browsing content contributed to CasaBio in various ways.
 */





// =======================================================================================
/**
 * Implements hook_help().
 *Inline Entity Form
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function browse_help($path, $arg) {}



/**
 * Implements hook_menu().
 */
function browse_menu() {
  $items['browse'] = array(
    // 'title'           => '<span class="icon-gesture"></span> Browse', // Problem; displays as plain text in page title
    'title'           => 'Browse',
    'page callback'   => 'browse_page_callback',
    'access callback' => TRUE,
    'type'            => MENU_NORMAL_ITEM,
    'menu_name'       => 'main-menu',
    'options'         => array(
      'attributes'    => array(),
      'html'          => TRUE,
    ),
  );

  return $items;
}




function browse_page_callback() {
  return browse_choice_content();
}





/**
 * Implements hook_init().
 */
function browse_init() {
  $aliased_path = drupal_get_path_alias(current_path());
  // dpm($aliased_path, '$aliased_path');
  if (drupal_match_path($aliased_path, 'browse/observations/map')
    || drupal_match_path($aliased_path, 'explore/observations/map')) {
    add_ol_files(TRUE);
  }
}





// =======================================================================================
/**
 * Implements hook_block_info().
 */
function browse_block_info() {
  $blocks = array();

  $blocks['browse_chooser_form'] = array(
    'info' => t('Browse chooser form'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    // 'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}





// =======================================================================================
/**
 * Implements hook_block_configure().
 */
// function browse_block_configure($delta='') {}





// =======================================================================================
/**
 * Implements hook_block_save().
 */
// function browse_block_save($delta = '', $edit = array()) {}





// =======================================================================================
/**
 * Implements hook_block_view().
 */
function browse_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    // For the Selected Buttons block
    case 'browse_chooser_form':
      $block['subject'] = t('Choose Your Browse');
      $block['content'] = drupal_get_form('browse_chooser_form');
      break;
  }

  return $block;
}





// =======================================================================================
/**
 * Defines the Browse chooser form.
 */
function browse_choice_content() {
  $file_url = drupal_get_path('module', 'browse')
    . '/browse_choice.html';
  return file_get_contents($file_url);
}





// =======================================================================================
/**
 * Defines the Browse chooser form.
 */
function browse_chooser_form() {
  $options_entity = array(
    'observations' => t('Observations'),
    'collections' => t('Collections'),
  );

  $form['entity'] = array(
    '#type' => 'radios',
    '#title' => t('What would you like to see?'),
    // '#default_value' => isset($node->active) ? $node->active : 1,
    '#options' => $options_entity,
    // '#description' => t('When a poll is closed, visitors can no longer vote for it.'),
  );

  $options_status = array(
    'new' => t('New'),
    'unidentified' => t('Unidentified'),
    'all' => t('All'),
  );

  $form['status'] = array(
    '#type' => 'radios',
    '#title' => t('Which ones?'),
    // '#default_value' => isset($node->active) ? $node->active : 1,
    '#options' => $options_status,
    // '#description' => t('When a poll is closed, visitors can no longer vote for it.'),
  );

  $options_format = array(
    'map' => t('Map'),
    'table' => t('Table'),
    'list' => t('List'),
  );

  $form['format'] = array(
    '#type' => 'radios',
    '#title' => t('Format?'),
    // '#default_value' => isset($node->active) ? $node->active : 1,
    '#options' => $options_format,
    // '#description' => t('When a poll is closed, visitors can no longer vote for it.'),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Browse it'),
    // '#disabled' => TRUE,
    '#submit' => array('browse_chooser_submit'),
  );

  $form['#attributes'] = array('class' => array('inline-selectables'));

  return $form;
}





// =======================================================================================
/**
 *
 */
function browse_chooser_submit($form, &$form_state) {
  // dpm($form, 'form');
  // dpm($form_state, 'form_state');

  $url = ''/*current_path()*/;
  // dpm($url, 'url');

  $options = array(
    // 'query' => array(''),
    // 'fragment' => '',
    // 'absolute' => FALSE,
    // 'alias' => FALSE,
    // 'prefix' => ''
  );

  switch ($form_state['values']['entity']) {
    case 'observations':
      $url .= 'browse/observations';
      break;

    case 'collections':
      $url .= 'browse/collections';
      break;

    default:
      return; // Don't redirect.
      break;
  }

  switch ($form_state['values']['format']) {
    case 'map':
      $url .= '/map';
      break;

    case 'table':
      $url .= '/table';
      break;

    case 'list':
      $url .= '/list';
      break;

    case '':
      // Add nothing.
      break;

    default:
      return; // Don't redirect.
      break;
  }

  switch ($form_state['values']['status']) {
    case 'new':
      $options['query'] = array('created' => '2');
      break;

    case 'unidentified':
      $options['query'] = array('has_identifications' => '2');
      break;

    case 'all':
      # code...
      break;

    case '':
      // Add nothing.
      break;

    default:
      return; // Don't redirect.
      break;
  }

  drupal_goto($url, $options, 302);
}
