<?php
/**
 * @file
 * Descriptionâ€¦
 */


/**
 * CONTENTS
 * 
 * [NU] = Function is not currently used
 * 
 * includes
 * constants
 * 
 * // Generic module hook functions
 * [NU] group_selected_observation_help()
 * group_selected_menu()
 * group_selected_init()
 * 
 * // Block functions
 * group_selected_block_info()
 * group_selected_block_view()
 * 
 * group_pictures_callback()
 * group_pictures()
 * delete_referring_nodes()
 * selected_buttons_block_content()
 * set_observation_fields()
 * get_taxon_from_filename()
*/


function time_elapsed($string = '')
{
  static $last = null;
  $now = microtime(true);
  if ($last != null) {
    dpm(str_pad(round(($now - $last), 4), 5, '0') . ' ELAPSED: ' . $string);
  }
  $last = $now;
}





// =============================================================================
/**
 * Implements hook_help().
 * Inline Entity Form
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
// function group_selected_observation_help($path, $arg) {}





// =============================================================================
/**
 * Implements hook_menu().
 */
function group_selected_menu() {
  $items['services/collections/%/group_pictures'] = array(
    'title' => 'Group Selected Processor Page',
    'page callback' => 'group_pictures_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,  // Create a permission for this? array('administer bulk media upload'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  $items['services/collections/%/auto_identify_groups'] = array(
    'title' => 'Auto Identify Processor Page',
    'page callback' => 'auto_identify_groups_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,  // Create a permission for this? array('administer bulk media upload'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}





// =============================================================================
/**
 * Implements hook_init().
 */
function group_selected_init() {
  // The path for which the files should be included
  $active_path = 'contribute/multiple-observations/group*';

  if(drupal_match_path(current_path(), $active_path)) {

    $file = drupal_get_path('module', 'selection') . '/scripts/selection.js';
    drupal_add_js($file);

    $file = drupal_get_path('module', 'group_selected') . '/scripts/group_selected.js';
    drupal_add_js($file);

    // $file = drupal_get_path('module', 'group_selected') . '/stylesheets/group_selected.css';
    // drupal_add_css($file);

    $file = libraries_get_path('jquery.hotkeys') . '/jquery.hotkeys.js';
    drupal_add_js($file);

    // Tinysort - for sorting HTML elements
    // $file = 'https://cdnjs.cloudflare.com/services/libs/tinysort/2.3.6/tinysort.min.js';
    $file = drupal_get_path('module', 'group_selected') . '/scripts/tinysort.min.js';
    drupal_add_js($file);
  }


  // Auto-group this collection

  // $collection = 806;

  // $query = new EntityFieldQuery();

  // $query->entityCondition('entity_type', 'node')
  //   ->entityCondition('bundle', 'picture')
  //   ->fieldCondition('field_collection', 'target_id', $collection, '=')
  //   // ->addMetaData('account', user_load(1)) // Run the query as user 1.
  // ;

  // $result = $query->execute();
  // // dpm($result, 'result');

  // if (isset($result['node'])) {
  //   $nids = array_keys($result['node']);
  //   auto_group_pictures($collection);
  // }
}



// =============================================================================
/**
 * Implements hook_block_info().
 */
function group_selected_block_info() {
  $blocks = array();

  $blocks['group_selected_buttons'] = array(
    'info' => t('Group selection actions'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    // 'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['group_selected_secondary_toolbar'] = array(
    'info' => t('Contribute MO Grouping info toolbar'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    // 'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}





// =============================================================================
/**
 * Implements hook_block_view().
 */
function group_selected_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    // For the Selected Buttons block
    case 'group_selected_buttons':
      $block['subject'] = t('Group Selected Buttons');
      $block['content'] = selected_buttons_block_content();
      break;

    // For the Selected Buttons block
    case 'group_selected_secondary_toolbar':
      $block['subject'] = t('Group Selected Buttons');
      $block['content'] = secondary_toolbar_block_content();
      break;
  }

  return $block;
}



/**
 * A menu callback function for grouping all pictures of a collection into
 * observations. This must be called via AJAX.
 *
 * @param $collection_nid
 *   The nid of the collection that the observations should reference.
 */
function group_pictures_callback($collection_nid) {
  // dpm($collection_nid, '$collection_nid');
  // dpm($_POST, '_POST');

  // For development only:
  // sleep (5);
  // throw new Exception("Error Processing Request", 1); 

  // $nids = $_POST;

  $request_body = file_get_contents("php://input");
  // $request_body = file_get_contents("drupal://input"); // Use inputstream module.
  $groups = json_decode($request_body, TRUE);
  // dpm($nids, '$nids');

  $response = group_pictures($collection_nid, $groups);
  return $response;
}



/**
 * A menu callback function for grouping all pictures of a collection into
 * observations. This must be called via AJAX.
 *
 * @param $collection_nid
 *   The nid of the collection that the observations should reference.
 */
function auto_identify_groups_callback($collection_nid) {
  // dpm($collection_nid, '$collection_nid');
  // dpm($_POST, '_POST');

  $query_params = drupal_get_query_parameters();
  // dpm($query_params, '$query_params');

  $offset = (empty($query_params['offset'])) ? 0 : $query_params['offset'];

  $function_start = microtime(true);

  $possible_matches = taxonomy_get_term_by_name($name, 'taxa');

  $max_results = 5;

  $total_observations = (int) get_observations_referencing_collection($collection_nid, ['is_count' => TRUE]);
  $observations = get_observations_referencing_collection($collection_nid, [], $offset, $max_results);
  $observations_processed = count($observations);
  // dpm($observations, '$observations');
  $tids = array();
  // dpm($tids, '$tids');

  // For testing
  // $observations = array_slice($observations, 0, 1, TRUE);
  // dpm($observations, '$observations');

  // time_elapsed();
  try {
    foreach ($observations as $observation_nid => $observation_repr) {
      $observation = entity_metadata_wrapper('node', $observation_nid);
      $tids[] = identify_from_filenames($observation);
      // time_elapsed('nid ' . $observation_nid);
    }
  }
  catch (Exception $e) {
    $response = array('#type' => 'ajax',
      '#commands' => $e->getMessage());
  }


  // $function_end = microtime(true);
  // dpm(str_pad(round(($function_end - $function_start), 4), 5, '0') . ' ELAPSED: auto_identify_groups_callback()');

  if ($offset + $max_results >= $total_observations) {
    drupal_set_message($total_observations . " observations auto-identified.", 'status');
  }

  $result = array(
    'Taxa tids identified' => $tids,
    'total_observations' => $total_observations,
    'observations_processed' => $observations_processed,
  );

  // $commands[] = ajax_command_replace('#MYMODULE-wrapper', 'Hey ! Some AJAX content !');
  $response = array(
    '#type' => 'ajax',
    '#commands' => $result,);
  return $response;
}



/**
 * @param string[] $nids
 *   Array of node id arrays; Each inner array represents an observation within
 *   the collection, and each nid inside it is a picture within that obervation.
 *
 * @param $groups
 *   Array in the format [{'id' => 345, 'pictures' => [34, 35]}]. The 'id' is 
 *   the node ID of the observation (if it exists), or any value to serve as a 
 *  temporary id if it's a new group.
 */
function group_pictures($collection, $groups) {
  // dpm($collection, '$collection');
  // dpm($groups, '$groups');

  $result = array(
    'result' => 'success',
    'new_nodes' => [],
    'altered_nodes' => [],
  );


  // Create new groups

  global $user;
  // $language = "und";

  $values = array(
    'type' =>     'observation',
    // 'title' =>    '',
    'uid' =>      $user->uid,
    'status' =>   1,
    'comment' =>  0,
    'promote' =>  0,
  );

  // First delete groups that no longer have pictures
  foreach ($groups as $group) {
    $nid = $group['id'];
    // dpm($nid, '$nid');
    $group_nids = $group['pictures'];
    // dpm($group_nids, '$group_nids');

    // If the group contains no pictures, delete it.
    if (! $group_nids) {
      node_delete($nid);
      $result['altered_nodes'][] = array(
        'id' => $nid,
      );
    }
  }

  // Loop through all again, updating and saving the non-deleted pictures
  foreach ($groups as $group) {

    $nid = $group['id'];
    // dpm($nid, '$nid');
    $status = $group['status'];
    // dpm($status, '$status');
    $group_nids = $group['pictures'];
    // dpm($group_nids, '$group_nids');

    // If this was a deleted group
    if (! $group_nids) {
      continue;
    }

    $entity_raw;

    if ($status == 'altered') {
      // Fetch it
      $entity_raw = node_load($nid);
    }
    else {
      // Create a new node (an observation)
      $entity_raw = entity_create('node', $values);
    }

    // Wrap the node to make dealing with the values of the entity's properties and fields easier
    $observation = entity_metadata_wrapper('node', $entity_raw);

    try {
      // In auto_group_nodes.module
      set_observation_fields($observation, $group_nids, $collection);
    }
    catch (Exception $e) {
      $result = array(
        'result' => 'failure',
        'reason' => $e->getMessage()
      );
    }

    $observation->save();
    // dpm($observation, 'observation');

    if ($status == 'new') {
      $result['new_nodes'][] = array(
        'temp_id' => $nid,
        'id' => $observation->getIdentifier(),
      );
    }
    else if ($status == 'altered') {
      $result['altered_nodes'][] = array(
        'id' => $observation->getIdentifier(),
      );
    }

  }

  // drupal_set_message(t("Pictures grouped successfully"), 'status');

  // $commands[] = ajax_command_replace('#MYMODULE-wrapper', 'Hey ! Some AJAX content !');
  $response = array('#type' => 'ajax', '#commands' => $result);

  return $response;
  // dpm($cause_error);
}





// =============================================================================
/**
 * Deletes all groups from this collection.
 *
 * @param $type
 *   Type of nodes to look for and delete.
 * @param $collection_nid
 *   The nid of the collection that the nodes must reference to be deleted.
 */
function delete_referring_nodes($type, $collection_nid) {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type)
    ->fieldCondition('field_collection', 'target_id', $collection_nid, '=')
    // ->addMetaData('account', user_load(1)) // Run the query as user 1.
  ;

  $result = $query->execute();
  // dpm($result, 'result');

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    node_delete_multiple($nids);
  }
}



/**
 * Implements hook_block_view().
 */
function selected_buttons_block_content() {
  $content = '<form id="selected_buttons">';
    // . '<button type="button" id="unselect" name="unselect" disabled>Unselect</button>'

  $file_url = drupal_get_path('module', 'group_selected') . '/grouping_toolbar_1.html';
  $content .= file_get_contents($file_url);

  $content .= '</form>';

  return $content;
}



/**
 * Implements hook_block_view().
 */
function secondary_toolbar_block_content() {
  $file_url = drupal_get_path('module', 'group_selected') . '/markup/group_toolbar_secondary.html';
  $content = file_get_contents($file_url);
  return $content;
}





/**
 * Set's the observation's count, location, and pictures fields.
 * 
 * @param EntityMetadataWrapper $observation
 *   The observation whose fields should be set. Within an entity_metadata_wrapper.
 * @param $picture_nids
 *   An array of nids of the pictures that this observation should include.
 * @param $collection
 *   The nid of the collection that this observation should be part of.
 */
function set_observation_fields(&$observation, $picture_nids, $collection) {
  // dpm($picture_nids, '$picture_nids');
  // dpm($collection, '$collection');

  $first_of_group = entity_metadata_wrapper('node', node_load($picture_nids[0]));

  $location = $first_of_group->field_location-> value();
  // dpm($location, 'location');
  $date = $first_of_group-> field_date_taken->  value();
  // dpm($date, 'date');

  $filenames = [];
  foreach ($picture_nids as $nid) {
    $picture = entity_metadata_wrapper('node', node_load($nid));

    $filename = $picture->field_image->value()['filename'];
    // dpm($filename, '$filename');

    $filenames[] = $filename;
  }

  $filenames_string = implode('|', $filenames);
  $observation->field_filenames->           set($filenames_string);

  $observation->field_count->               set(1);
  $observation->field_pictures_observation->set($picture_nids);
  $observation->field_location->            set($location);
  $observation->field_date_observed->       set($date); // Taken from first picture
  $observation->field_collection->          set($collection);

  // Get a fully loaded entity object for the logged in user.
  $user = entity_metadata_wrapper('user', $GLOBALS['user']->uid);
  // dpm($user->raw(), '$user');

  $observer_name = $user->field_full_name->value();
  if ($observer_name) {
    // dpm($observer_name, '$observer_name');
    $observation->field_observer_name->set($observer_name);
  }

  $observation->save();

  // Create identification based on file name.
  // Now done through a separate callback.
  // $taxon = identify_from_filenames($observation);
}


/**
 * Create identification based on file name.
 * 
 * @param EntityMetadataWrapper $observation
 * 
 * @return
 *   The taxon tid if one is found, otherwise NULL.
 */
function identify_from_filenames(&$observation) {
  // dpm($observation, '$observation');
  // If this observation already has identifications, skip it
  $existing_identifications = get_identifications_refing_observation('identification', $observation->getIdentifier());
  // dpm($existing_identifications, '$existing_identifications');
  if (count($existing_identifications) >= 1) {
    return array_keys($existing_identifications);
  }


  // dpm($observation->raw(), '$observation->raw()');
  $filenames = explode('|', $observation->field_filenames->value());
  // dpm($filenames, '$filenames');

  // Find the taxon

  $taxon_nid = NULL;
  foreach ($filenames as $filename) {
    $taxon_tid_found = get_taxon_from_filename($filename); // From group_selected.module
    if ($taxon_tid_found) {
      $taxon_nid = $taxon_tid_found;
      // dpm($taxon_nid, '$taxon_nid');
      break;
    }
  }
  // time_elapsed('tid found ' . $taxon_nid . ': ');
  // dpm($taxon_nid, '$taxon_nid');

  // Create identification

  if ($taxon_nid) {
    global $user;

    $values = array(
      'uid' =>                    $user->uid,
      'species_tid' =>            $taxon_nid,
      'observation_subj_nid' =>   $observation->getIdentifier(),
      'certainty' =>              8,);
    create_identification($values);
  }
  else {
    return NULL;
  }
  // time_elapsed('taxon created: ');

  return $taxon_nid;
}





/**
 * Searches the database for a taxon with a name matching the given filename.
 *
 * Assumes taxon name is spelt correctly (does not fuzzy-match).
 * If multiple matching taxa are found, only the first result will be returned.
 * Can match species with 2-word names, or other taxa.
 * Can split the filename by spaces, dashes or underscores.
 * 
 * @param string $filename
 */
function get_taxon_from_filename($filename) {
  // dpm($filename, '$filename');
  $taxon = null;

  // Trim off everything after the last period.
  $name = substr($filename, 0, strrpos($filename, '.'));
  // dpm($name, 'name');

  // Remove special characters
  $name = preg_replace('/\.|\,|\;/', '', $name);
  // dpm($name, '$name');

  // ---------------------------------------------------------------------------
  // Try with whole name (can match any taxon).
  // dpm('trying whole name');

  // dpm($name, 'name searched for');
  $possible_matches = taxonomy_get_term_by_name($name, 'taxa');
  // dpm($possible_matches, 'possible_matches');

  if (count($possible_matches) >= 1) {
    $keys = array_keys($possible_matches);
    $taxon = $keys[0]; // Just the first one.
    return $taxon;
  }
  // time_elapsed();

  // ---------------------------------------------------------------------------
  // Split filename into words.
  // dpm('trying filename split pairs');

  // Can match spaces, dashes, or underscores
  $regex = '/ +|-+|_+/';
  $words = preg_split($regex, $name);
  // dpm($words, '$words');

  // ---------------------------------------------------------------------------
  // Try with 2 words at a time (can match species).

  for ($i = 0; $i < count($words) - 1; $i++) {
    $species_name = $words[$i] . ' ' . $words[$i + 1];

    // dpm($species_name, 'species_name searched for');
    $possible_matches = taxonomy_get_term_by_name($species_name, 'taxa');
    // dpm($possible_matches, 'possible_matches');
    // time_elapsed();

    if (count($possible_matches) >= 1) {
      $keys = array_keys($possible_matches);
      $taxon = $keys[0]; // Just the first one.
      return $taxon;
    }
  }
  // time_elapsed();

  // ---------------------------------------------------------------------------
  // Try with each individual word at a time (can match any taxon).
  // dpm('trying each filename split');

  foreach ($words as $word) {

    // dpm($word, 'word searched for');
    $possible_matches = taxonomy_get_term_by_name($word, 'taxa');
    // dpm($possible_matches, 'possible_matches');

    if (count($possible_matches) >= 1) {
      $keys = array_keys($possible_matches);
      $taxon = $keys[0]; // Just the first one.
      return $taxon;
    }
  }
  // time_elapsed();

  return $taxon;
}
