// @file
// Custom sass mixins
//
// Define the custom mixins for your project here.
// http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#defining_a_mixin

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}


// -----------------------------------------------------------------------------
//                                                  Custom

// This is a modern replacement for 'clearfix'
@mixin group {
  &:after {
    content: "";
    display: table;
    clear: both;}
}
// @mixin clearfix {
//   @include group;
// }

@mixin border-radius($radius) {
  @include border-top-radius($radius);
  @include border-bottom-radius($radius);
}

@mixin ellipsis {
  text-overflow: ellipsis;

  /* Required for text-overflow to do anything */
  white-space: nowrap;
  overflow: hidden;
}

@mixin overflow_fade($background-color: white, $height: $line-height * 1em, $fade-length: 2em, $fade-height: $line-height * 1em) {
  overflow: hidden;
  width: 100%;
  height: $height;
  display: block;
  word-break: break-all;
  position: relative;

  // The 'fade out' gradient at the end of the text
  &::after {
    content: '';
    position: absolute;
    height: $fade-height;
    width: $fade-length;
    bottom: 0;
    right: 0;
    @include background-image(linear-gradient(to right, rgba($background-color, 0), rgba($background-color, 1)));
  }
}

// Column
// An element that is in a row with other elements, with a gap between the elements.
@mixin column ($cols: 2, $gutter-width: $gutter-wide, $float-dir: left) {
    $col-width: (100% - ($cols - 1) * $gutter-width) / $cols;

    $last-col: $cols + "n";
    $first-col: $last-col + " - " + ($cols - 1);

    float: $float-dir;
    width: $col-width;
    margin-left: $gutter-width / 2;
    margin-right: $gutter-width / 2;

    display: inline-block;

    &:nth-child(n + #{$cols + 1}) {
      margin-top: $gutter-width;
    }

    &:nth-child(#{$first-col}) {
        margin-left: 0;
        clear: $float-dir;
    }
    &:nth-child(#{$last-col}) {
        margin-right: 0;
    }
}

// // Navigation
// @mixin menu-vertical {
//   li {
//     display: block;

//     a {
//       text-align: left;
//     }
//   }
// }
// @mixin menu-horizontal {
//   @include display(flex);
      
//   li {
//     // display: table-cell;
//     @include flex(1 1 auto);

//     a {
//       text-align: center;
//     }
//   }
// }


// Flexbox

@mixin display-flex() {
  display:  -webkit-box;
  display:     -moz-box;
  display:  -ms-flexbox;
  display: -webkit-flex;
  display:         flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
          -ms-flex: $values;
              flex: $values;
}

@mixin align-items($value) {
    -webkit-box-align: $value;
   -webkit-flex-align: $value;
       -ms-flex-align: $value;
  -webkit-align-items: $value;
          align-items: $value;
}

@mixin justify-content($value) {
  @if $value == 'justify' {
           -webkit-box-pack: justify;
    -webkit-justify-content: space-between;
              -ms-flex-pack: justify;
            justify-content: space-between;
  }
  @if $value == 'center' {
           -webkit-box-pack: center;
    -webkit-justify-content: center;
              -ms-flex-pack: center;
            justify-content: center;
  }
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
